{"version":3,"sources":["C:/Dev/VierGewinnt6/client/user/user-module.ts","C:/Dev/VierGewinnt6/client/user/services/user-service.ts","C:/Dev/VierGewinnt6/client/user/controllers/user-controller.ts","C:/Dev/VierGewinnt6/client/session/session-module.ts","C:/Dev/VierGewinnt6/client/session/services/session-service.ts","C:/Dev/VierGewinnt6/client/session/controllers/session-controller.ts","C:/Dev/VierGewinnt6/client/home/home-module.ts","C:/Dev/VierGewinnt6/client/home/controllers/home-controller.ts","C:/Dev/VierGewinnt6/client/game/game-module.ts","C:/Dev/VierGewinnt6/client/game/directives/game-move-directive.ts","C:/Dev/VierGewinnt6/client/game/directives/game-field-directive.ts","C:/Dev/VierGewinnt6/client/game/controllers/game-controller.ts","C:/Dev/VierGewinnt6/client/common/common-module.ts","C:/Dev/VierGewinnt6/client/common/services/message-service.ts","app.js","C:/Dev/VierGewinnt6/client/common/services/logger-service.ts","C:/Dev/VierGewinnt6/client/common/services/config-service.ts","C:/Dev/VierGewinnt6/client/common/directives/main-menu-directive.ts","C:/Dev/VierGewinnt6/client/chat/chat-module.ts","C:/Dev/VierGewinnt6/client/chat/directives/chat-directive.ts","C:/Dev/VierGewinnt6/client/chat/controllers/chat-controller.ts","C:/Dev/VierGewinnt6/client/user/user-routes.ts","C:/Dev/VierGewinnt6/client/session/session-routes.ts","C:/Dev/VierGewinnt6/client/lobby/lobby-module.ts","C:/Dev/VierGewinnt6/client/lobby/lobby-routes.ts","C:/Dev/VierGewinnt6/client/game/services/game-service.ts","C:/Dev/VierGewinnt6/client/lobby/services/lobby-storage.ts","C:/Dev/VierGewinnt6/client/lobby/models/lobby-game.ts","C:/Dev/VierGewinnt6/client/lobby/interfaces/lobby-interface.ts","C:/Dev/VierGewinnt6/client/lobby/directives/lobby-directive.ts","C:/Dev/VierGewinnt6/client/lobby/controllers/lobby-controller.ts","C:/Dev/VierGewinnt6/client/home/home-routes.ts","C:/Dev/VierGewinnt6/client/game/game-routes.ts","C:/Dev/VierGewinnt6/client/chat/chat-routes.ts","C:/Dev/VierGewinnt6/client/app-module.ts","C:/Dev/VierGewinnt6/client/app-routes.ts","user/views/user.tpl.html","session/views/session.tpl.html","lobby/views/lobby.tpl.html","lobby/views/action-message.html","home/views/home.tpl.html","game/views/game.tpl.html","game/directives/game-move-directive.tpl.html","game/directives/game-field-directive.tpl.html","common/directives/main-menu-directive.tpl.html","chat/views/chat.tpl.html","chat/views/chat-window-template.html"],"names":["home","User","User.Services","User.Services.UserService","User.Services.UserService.constructor","User.Services.UserService.loadUserData","User.Services.UserService.getCurrentUser","User.Services.UserService.saveUser","User.Controllers","User.Controllers.UserCtrl","User.Controllers.UserCtrl.constructor","User.Controllers.UserCtrl.saveUser","session","Session","Session.Services","Session.Services.SessionService","Session.Services.SessionService.constructor","Session.Services.SessionService.login","Session.Services.SessionService.logout","Session.Services.SessionService.isLoggedIn","Session.Services.SessionService.getCurrentSession","Session.Services.SessionService.loadCurrentSession","Session.Services.SessionService.getPlayerId","Session.Services.SessionService.get","Session.Services.SessionService.setCurrentSession","Session.Controllers","Session.Controllers.SessionCtrl","Session.Controllers.SessionCtrl.constructor","Session.Controllers.SessionCtrl.login","Session.Controllers.SessionCtrl.logout","Home","Home.Controllers","Home.Controllers.HomeCtrl","game","Game","Game.Directives","Game.Directives.GameMove","Game.Directives.GameMove.constructor","Game.Directives.GameMove.link","GameField","GameField.gameField","Game.Controllers","Game.Controllers.GameCtrl","Game.Controllers.GameCtrl.constructor","Game.Controllers.GameCtrl.getCurrentGame","Game.Controllers.GameCtrl.mouseOver","Game.Controllers.GameCtrl.keyDown","Game.Controllers.GameCtrl.doMove","Game.Controllers.GameCtrl.getMoveFields","Game.Controllers.GameCtrl.isCurrentUserOnMove","Game.Controllers.GameCtrl.isGameFinished","Game.Controllers.GameCtrl.isGameBroken","Game.Controllers.GameCtrl.getGameState","Game.Controllers.GameCtrl.restartGame","Game.Controllers.GameCtrl.breakGame","common","Common","Common.Services","Common.Services.ClientMessage","Common.Services.ClientMessage.constructor","Common.Services.MessageService","Common.Services.MessageService.constructor","this","ws","readyState","WebSocket","OPEN","callback","self","setTimeout","waitForConnection","interval","Common.Services.MessageService.connect","Common.Services.MessageService.addMessageListener","Common.Services.MessageService.removeMessageListenerType","Common.Services.MessageService.removeMessageListener","Common.Services.MessageService.sendMessage","send","JSON","stringify","message","sendMessage","Common.Services.MessageService.onMessage","Common.Services.MessageService.onOpen","Common.Services.MessageService.onError","Common.Services.MessageService.onClose","Common.Services.LoggerService","Common.Services.LoggerService.constructor","Common.Services.LoggerService.error","Common.Services.LoggerService.warn","Common.Services.LoggerService.info","Common.Services.LoggerService.debug","Common.Services.LoggerService.log","Common.Services.ConfigService","Common.Services.ConfigService.constructor","Common.Services.ConfigService.getServiceUrl","Common.Services.ConfigService.getWebsocketUrl","Common.Directives","Common.Directives.mainMenu","Common.Directives.MainMenuCtrl","Common.Directives.MainMenuCtrl.constructor","Common.Directives.MainMenuCtrl.isUserLoggedIn","Common.Directives.MainMenuCtrl.getCurrentUsername","chat","chat.directives","chat.directives.ChatWindow","chat.directives.ChatWindow.constructor","chat.directives.ChatWindow.link","scope","chatModel","currentMessage","e","which","chatMsg","$","val","unsubscribeToChatSectionEvents","chatSection","id","chatHistory","chatWindowDiv","newChatHistory","oldChatHistory","length","empty","i","append","creationDate","from","index","chat.directives.ChatWindow.factory","__extends","d","b","__","constructor","p","hasOwnProperty","prototype","chat.controllers","chat.controllers.ChatCtrl","chat.controllers.ChatCtrl.constructor","chat.controllers.ChatCtrl.initChatModel","chat.controllers.ChatCtrl.storeChatSectionDataInCtrl","chat.controllers.ChatCtrl.subscribeToChatSectionEvents","data","hide","show","chat.controllers.ChatCtrl.chatMessageListener","push","chatMessageObj","chat.controllers.ChatCtrl.unsubscribeToChatSectionEvents","chat.controllers.ChatCtrl.sendMessage","chat.controllers.ChatCtrl.fetchChatHistory","chat.controllers.ChatMessage","chat.controllers.ChatMessage.constructor","chat.controllers.ClientMessage","chat.controllers.ClientMessage.constructor","chat.controllers.UnsubscribeToChatSectionMessage","chat.controllers.UnsubscribeToChatSectionMessage.constructor","chat.controllers.ChatInputMessage","chat.controllers.ChatInputMessage.constructor","chat.controllers.ChatHistoryMessage","chat.controllers.ChatHistoryMessage.constructor","home.config","userService","loadUserData","config","$inject","session.config","sessionService","loadCurrentSession","lobby","lobby.config","Game.Services","Game.Services.Color","Game.Services.GameState","Game.Services.GameService","Game.Services.GameService.constructor","that","gameId","_id","log","debug","setGame","Game.Services.GameService.getGame","Game.Services.GameService.getGameId","Game.Services.GameService.newGame","Game.Services.GameService.loadGame","Game.Services.GameService.doMove","Game.Services.GameService.restartGame","Game.Services.GameService.breakGame","Game.Services.GameService.setGame","Game.Services.GameUpdateMessage","Game.Services.GameUpdateMessage.constructor","lobby.services","lobby.services.LobbyStorage","lobby.services.LobbyStorage.constructor","$location","path","lobby.services.LobbyStorage.LobbyRoom","lobby.services.RoomUpdateMessage","lobby.services.RoomUpdateMessage.constructor","angular","module","service","services","LobbyStorage","lobby.models","lobby.models.Room","lobby.interfaces","lobby.interfaces.Room","lobby.interfaces.Room.constructor","lobby.directives","lobby.directives.StopEvent","lobby.directives.StopEvent.constructor","stopPropagation","lobby.directives.StopEvent.factory","lobby.directives.RoomValidator","lobby.directives.RoomValidator.constructor","ROOM_REGEXP","test","viewValue","lobby.directives.RoomValidator.factory","lobby.directives.ActionMessageDisplay","lobby.directives.ActionMessageDisplay.constructor","$scope","actionMessage","isError","lobby.directives.ActionMessageDisplay.factory","directive","directives","StopEvent","DirectoryName","factory","RoomValidator","ActionMessageDisplay","lobby.controllers","lobby.controllers.LobbyCtrl","lobby.controllers.LobbyCtrl.constructor","htmlBody","tooltip","selector","lobby.controllers.LobbyCtrl.toggleNewGame","lobby.controllers.LobbyCtrl.toggleEditingGame","lobby.controllers.LobbyCtrl.editRoom","lobby.controllers.LobbyCtrl.joinRoom","lobby.controllers.LobbyCtrl.getPositionOfElement","lobby.controllers.LobbyCtrl.getHighestValue","lobby.controllers.LobbyCtrl.reorderList","lobby.controllers.LobbyCtrl.stopInterval","isDefined","lobbyInterval","$interval","cancel","undefined","lobby.controllers.LobbyCtrl.createRoom","lobbyData","room","controllers","ActionMessageSuccess","lobby.controllers.LobbyCtrl.deleteRoom","splice","pos","lobby.controllers.LobbyCtrl.getRooms","res","lobbyStorage","LobbyRoom","query","err","lobby.controllers.LobbyCtrl.updateRoom","lobby.controllers.ActionMessage","lobby.controllers.ActionMessage.constructor","lobby.controllers.ActionMessageError","lobby.controllers.ActionMessageError.constructor","lobby.controllers.ActionMessageSuccess","lobby.controllers.ActionMessageSuccess.constructor","lobby.controllers.ClientMessage","lobby.controllers.ClientMessage.constructor","game.config","then","result","gameService","newGame","loadGame","$route","current","params","vierGewinnt6","vierGewinnt6.config","vierGewinnt6.init","rejection","status","LoggerService","warn","init","run","$templateCache","put"],"mappings":"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","file":"app-a48edae3.js","sourcesContent":["///<reference path='../../typings/tsd.d.ts' />\r\nmodule home {\r\n  'use strict';\r\n\r\n  /* @ngdoc object\r\n   * @name user\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('user', [\r\n      'ngRoute'\r\n    ]);\r\n}\r\n","///<reference path='../../../typings/tsd.d.ts' />\n///<reference path='../../../typings/angularjs/angular-resource.d.ts' />\nmodule User.Services {\n  'use strict';\n\n  export interface IUserService {\n    loadUserData(): ng.IPromise<IUser>;\n    getCurrentUser(): IUser;\n    saveUser(user: IUser): ng.IPromise<IUser>;\n  }\n\n  export interface IUser {\n    name: string;\n    password: string;\n  }\n\n  class UserService {\n\n    private userData : IUser;\n\n    private userResource : ng.resource.IResourceClass<ng.resource.IResource<IUser>>;\n\n    public static $inject = [\n      '$resource', '$q', 'ConfigService', 'LoggerService'\n    ];\n\n    constructor(private $resource: angular.resource.IResourceService, private $q: ng.IQService, private configService: Common.Services.IConfigService,\n      private log: Common.Services.ILoggerService) {\n      this.userResource = $resource(this.configService.getServiceUrl('/users'));\n    }\n\n    loadUserData(): ng.IPromise<IUser> {\n      var deferred = this.$q.defer();\n\n      if (!this.userData) {\n        this.userResource.get().$promise\n          .then(user => {\n            this.userData = user;\n            deferred.resolve(this.userData);\n          })\n          .catch(err => {\n            deferred.reject(err);\n          });\n      } else {\n        deferred.resolve(this.userData);\n      }\n\n      return deferred.promise;\n    }\n\n    getCurrentUser(): IUser {\n      return this.userData;\n    }\n\n    saveUser(user: IUser): ng.IPromise<IUser> {\n      this.userData = user;\n      return this.userResource.save(user).$promise;\n    }\n  }\n\n  /**\n   * @ngdoc service\n   * @name user.service:User\n   *\n   * @description\n   *\n   */\n  angular\n    .module('user')\n    .service('UserService', UserService);\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule User.Controllers {\n  'use strict';\n\n  class UserCtrl {\n\n    ctrlName: string;\n    displayUser: User.Services.IUser;\n    password: string;\n    passwordCheck: string;\n\n    // $inject annotation.\n    // It provides $injector with information about dependencies to be injected into constructor\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\n    // See http://docs.angularjs.org/guide/di\n    public static $inject = [\n      'UserService', 'LoggerService'\n    ];\n\n    // dependencies are injected via AngularJS $injector\n    constructor(private userService: User.Services.IUserService, private log: Common.Services.ILoggerService) {\n      this.displayUser = userService.getCurrentUser();\n    }\n\n    saveUser() {\n      this.displayUser.password = this.password;\n      var that = this;\n\n      this.userService.saveUser(this.displayUser)\n        .then(result => {\n          that.log.info('Daten gespeichert', result);\n        })\n        .catch(err => {\n          that.log.error('Speichern fehlgeschlagen', err);\n        });\n    }\n  }\n\n\n  /**\n  * @ngdoc object\n  * @name user.controller:UserCtrl\n  *\n  * @description\n  *\n  */\n  angular\n    .module('user')\n    .controller('UserCtrl', UserCtrl);\n}\n","///<reference path='../../typings/tsd.d.ts' />\nmodule session {\n  'use strict';\n\n  /* @ngdoc object\n  * @name session\n  * @description\n  *\n  */\n  angular\n    .module('session', [\n      'ngRoute'\n    ]);\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Session.Services {\n  'use strict';\n\n  export interface ISessionService {\n    login(username : string, password : string) : ng.IPromise<ISession>;\n    logout(): ng.IPromise<ISession>;\n    isLoggedIn(): boolean;\n    getCurrentSession(): ISession;\n    loadCurrentSession(): ng.IPromise<ISession>;\n    getPlayerId(): string;\n  }\n\n  export interface ISession {\n    playerId: string;\n    username: string;\n    loggedId: boolean;\n  }\n\n  class SessionService {\n\n    private currentSession : ISession;\n\n    public static $inject = [\n      '$http', '$q', 'ConfigService', 'LoggerService'\n    ];\n\n    constructor(private $http: ng.IHttpService, private $q: ng.IQService, private configService: Common.Services.IConfigService, private log: Common.Services.ILoggerService) {\n    }\n\n    login(username: string, password: string) : ng.IPromise<ISession> {\n      var deferred = this.$q.defer();\n\n      this.$http.post<ISession>(this.configService.getServiceUrl('/session/login'), { \"username\":username, \"password\":password})\n        .then(data => {\n          this.setCurrentSession(data.data);\n          deferred.resolve(this.currentSession);\n        })\n        .catch(err => {\n          this.log.debug('login failed', err);\n          deferred.reject(err);\n        });\n\n      return deferred.promise;\n    }\n\n    logout(): ng.IPromise<ISession> {\n      var deferred = this.$q.defer();\n\n      this.$http.post<ISession>(this.configService.getServiceUrl('/session/logout'), {})\n        .then(data => {\n          this.setCurrentSession(data.data);\n          deferred.resolve(this.currentSession);\n        })\n        .catch(err => {\n          this.log.debug('logout failed', err);\n          deferred.reject(err);\n        });\n\n      return deferred.promise;\n    }\n\n    isLoggedIn() {\n      return this.currentSession && this.currentSession.loggedId;\n    }\n\n    getCurrentSession(): ISession {\n      return this.currentSession;\n    }\n\n    loadCurrentSession(): ng.IPromise<ISession> {\n      var deferred = this.$q.defer();\n\n      if (!this.currentSession) {\n        this.$http.get<ISession>(this.configService.getServiceUrl('/session/'))\n          .then(data => {\n            this.setCurrentSession(data.data);\n            deferred.resolve(this.currentSession);\n          })\n          .catch(err => {\n            this.log.debug('load current session failed', err);\n            deferred.reject(err);\n          });\n      } else {\n        deferred.resolve(this.currentSession);\n      }\n\n      return deferred.promise;\n    }\n\n    getPlayerId(): string {\n      return this.currentSession.playerId;\n    }\n\n    get(): string {\n      return 'LoginService';\n    }\n\n    private setCurrentSession(session: ISession): void {\n      this.currentSession = session;\n      this.log.debug('current session set to playerId ' + this.currentSession.playerId + ' and ' + this.currentSession.username);\n    }\n  }\n\n  /**\n   * @ngdoc service\n   * @name login.service:LoginService\n   *\n   * @description\n   *\n   */\n  angular\n    .module('session')\n    .service('SessionService', SessionService);\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Session.Controllers {\n  'use strict';\n\n  class SessionCtrl {\n\n    username: string;\n    password: string;\n    currentSession: Session.Services.ISession;\n    userLoggedIn: boolean;\n\n    // $inject annotation.\n    // It provides $injector with information about dependencies to be injected into constructor\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\n    // See http://docs.angularjs.org/guide/di\n    public static $inject = [\n      'SessionService',\n      'appConfig',\n      'LoggerService'\n    ];\n\n    // dependencies are injected via AngularJS $injector\n    constructor(private sessionService : Session.Services.ISessionService, private appConfig: vierGewinnt6.IAppConfig, private log: Common.Services.ILoggerService) {\n      this.currentSession = sessionService.getCurrentSession();\n      this.userLoggedIn = this.currentSession.loggedId;\n    }\n\n    login() {\n      var vm = this;\n      this.sessionService.login(this.username, this.password)\n        .then(session => {\n          vm.currentSession = session;\n          vm.userLoggedIn = session.loggedId;\n        })\n        .catch(err => {\n          vm.log.error('Login fehlgeschlagen');\n        });\n    }\n\n    logout() {\n      var vm = this;\n      this.sessionService.logout()\n        .then(session => {\n          vm.currentSession = session;\n          vm.userLoggedIn = session.loggedId;\n        })\n        .catch(err => {\n          vm.log.error('Logout fehlgeschlagen');\n        });\n    }\n  }\n\n\n  /**\n  * @ngdoc object\n  * @name login.controller:LoginCtrl\n  *\n  * @description\n  *\n  */\n  angular\n    .module('session')\n    .controller('SessionCtrl', SessionCtrl);\n}\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule home {\r\n  'use strict';\r\n\r\n  /* @ngdoc object\r\n  * @name home\r\n  * @description\r\n  *\r\n  */\r\n  angular\r\n    .module('home', [\r\n      'ngRoute'\r\n    ]);\r\n}\r\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Home.Controllers {\n  'use strict';\n\n  class HomeCtrl {\n\n    // $inject annotation.\n    // It provides $injector with information about dependencies to be injected into constructor\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\n    // See http://docs.angularjs.org/guide/di\n    public static $inject = [\n    ];\n\n    // dependencies are injected via AngularJS $injector\n    constructor() {\n    }\n  }\n\n\n  /**\n  * @ngdoc object\n  * @name home.controller:HomeCtrl\n  *\n  * @description\n  *\n  */\n  angular\n    .module('home')\n    .controller('HomeCtrl', HomeCtrl);\n}\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule game {\r\n  'use strict';\r\n\r\n  /* @ngdoc object\r\n  * @name game\r\n  * @description\r\n  *\r\n  */\r\n  angular\r\n    .module('game', [\r\n      'ngRoute'\r\n    ]);\r\n}\r\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Game.Directives {\n  'use strict';\n\n  export class GameMove implements ng.IDirective {\n    public restrict = 'E';\n    //public scope = {};\n    public replace = true;\n    public templateUrl = 'game/directives/game-move-directive.tpl.html';\n\n    link(scope: ng.IScope, element: JQuery, attrs: any) {\n      console.log(\"link scope \" + scope);\n    }\n  }\n\n  angular\n    .module('game')\n    .directive('gameMove', () => new GameMove());\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule GameField {\n  'use strict';\n\n  /**\n  * @ngdoc directive\n  * @name game.directive:gameField\n  * @restrict EA\n  * @element\n  *\n  * @description\n  *\n  * @example\n    <example module=\"game\">\n      <file name=\"index.html\">\n        <game-field></game-field>\n      </file>\n    </example>\n  *\n  */\n  angular\n    .module('game')\n    .directive('gameField', gameField);\n\n  function gameField(): ng.IDirective {\n    return {\n      restrict: 'E',\n      replace: true,\n      templateUrl: 'game/directives/game-field-directive.tpl.html'\n    };\n  }\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Game.Controllers {\n  'use strict';\n\n  class GameCtrl {\n\n    private selectedMoveField = 3;\n\n    // $inject annotation.\n    // It provides $injector with information about dependencies to be injected into constructor\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\n    // See http://docs.angularjs.org/guide/di\n    public static $inject = [\n      'LoggerService', 'GameService', '$scope', 'SessionService', '$location'\n    ];\n\n    // dependencies are injected via AngularJS $injector\n    constructor(private log: Common.Services.ILoggerService, private gameService: Game.Services.IGameService,\n                private $scope: ng.IScope, private sessionService: Session.Services.ISessionService,\n                private $location: ng.ILocationService) {\n      var that = this;\n    }\n\n    getCurrentGame() {\n      return this.gameService.getGame();\n    }\n\n    mouseOver(evt: JQueryEventObject): void {\n      var col = $(evt.target).data('x');\n      if (col != undefined) {\n        this.selectedMoveField = col;\n      }\n    }\n\n    keyDown(evt: JQueryEventObject): void {\n      var game = this.getCurrentGame();\n      var maxIndex = game.cells[0].length - 1;\n      var keyCode = evt.keyCode;\n\n      if (keyCode === 37 && this.selectedMoveField > 0) { // keyright\n        this.selectedMoveField--;\n      } else if (keyCode === 39 && this.selectedMoveField < maxIndex) { // keyleft\n        this.selectedMoveField++;\n      } else if (keyCode === 13 || keyCode === 32 || keyCode === 40) { // enter, space, keydown\n        this.gameService.doMove(this.selectedMoveField);\n      }\n    }\n\n    doMove(evt: JQueryEventObject): void {\n      var col = $(evt.target).data('x');\n      if (col != undefined) {\n        this.gameService.doMove(col);\n      }\n    }\n\n    getMoveFields(): Game.Services.Color[] {\n      var cells = new Array<Game.Services.Color>();\n      var game = this.getCurrentGame();\n\n      for (var row = 0; row < game.cells[0].length; row++) {\n        if (row === this.selectedMoveField) {\n          cells.push(game.nextColor);\n        } else {\n          cells.push(Game.Services.Color.Empty);\n        }\n      }\n\n      return cells;\n    }\n\n    isCurrentUserOnMove(): boolean {\n      var playerId = this.sessionService.getPlayerId();\n      var nextPlayerId = this.getCurrentGame().nextPlayerId;\n      return playerId === nextPlayerId;\n    }\n\n    isGameFinished(): boolean {\n      return this.getCurrentGame().state === Game.Services.GameState.Finished;\n    }\n\n    isGameBroken(): boolean {\n      return this.getCurrentGame().state === Game.Services.GameState.Broken;\n    }\n\n    getGameState(): IGameState {\n      var gameState: IGameState;\n\n      if (this.isGameFinished()) {\n        if (this.isCurrentUserOnMove()) {\n          gameState = {\n            state: \"won\",\n            message: \"Spiel gewonnen!\"\n          };\n        } else {\n          gameState = {\n            state: \"loose\",\n            message: \"Spiel verloren!\"\n          };\n        }\n      } else if (this.isGameBroken()) {\n        gameState = {\n          state: \"broken\",\n          message: \"Spiel beendet!\"\n        };\n      } else {\n        if (this.isCurrentUserOnMove()) {\n          gameState = {\n            state: \"play\",\n            message: \"Zug ausführen!\"\n          };\n        } else {\n          gameState = {\n            state: \"wait\",\n            message: \"Zug abwarten!\"\n          };\n        }\n      }\n\n      return gameState;\n    }\n\n    restartGame(): void {\n      this.log.debug(\"restart game\");\n      this.gameService.restartGame();\n    }\n\n    breakGame(): void {\n      this.log.debug(\"break game\");\n      this.gameService.breakGame().then(() => {\n        this.$location.path('/lobby');\n      });\n    }\n  }\n\n  export interface IGameState {\n    state: string;\n    message: string;\n  }\n\n  /**\n  * @ngdoc object\n  * @name game.controller:GameCtrl\n  *\n  * @description\n  *\n  */\n  angular\n    .module('game')\n    .controller('GameCtrl', GameCtrl);\n}\n","///<reference path='../../typings/tsd.d.ts' />\nmodule common {\n  'use strict';\n\n  /* @ngdoc object\n   * @name game\n   * @description\n   *\n   */\n  angular\n    .module('common', [\n    ]);\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Common.Services {\n  'use strict';\n\n  export interface IMessageService {\n    addMessageListener(messageType:string, listener:(message:IMessage) => void);\n    removeMessageListener(messageType:string, listener:(message:IMessage) => void);\n    removeMessageListenerType(messageType:string);\n    sendMessage(message:IMessage);\n  }\n\n  /**\n   * Message between services and server and clients.\n   */\n  export interface IMessage {\n\n    /**\n     * Type of the message.\n     */\n      type: string;\n\n    /**\n     * The message content.\n     */\n    data: any;\n  }\n\n  export class ClientMessage<T> implements IMessage {\n\n    type:string;\n    data:T;\n\n    constructor(type:string, data:T) {\n      this.type = type;\n      this.data = data;\n    }\n  }\n\n  class MessageService implements IMessageService {\n\n    private ws:WebSocket;\n\n    private messageListeners:any = {};\n\n    private timerId = 0;\n\n    public static $inject = [\n      'LoggerService', '$rootScope', 'ConfigService', '$http'\n    ];\n\n    constructor(private log: Common.Services.ILoggerService, private $rootScope: ng.IScope, private configService: Common.Services.IConfigService, private $http: ng.IHttpService) {\n      // Connect to the websocket server\n      var serverUrl = configService.getWebsocketUrl();\n      log.debug('trying to reach server ' + serverUrl + ' before connecting websocket');\n      this.connect(serverUrl);\n    }\n\n    private connect(baseWsUrl:string) {\n      this.log.debug('connecting websocket to ' + baseWsUrl);\n      var self = this;\n\n      this.ws = new WebSocket(baseWsUrl);\n\n      this.ws.onmessage = (event) => self.onMessage(event);\n      this.ws.onopen = (event) => self.onOpen(event);\n      this.ws.onerror = (error) => self.onError(error);\n      this.ws.onclose = (event) => self.onClose(event);\n    }\n\n    public addMessageListener(messageType:string, listener:(message:IMessage) => void) {\n      this.log.debug(\"adding message listener \" + listener + \" for message type \" + messageType);\n\n      if (!this.messageListeners.hasOwnProperty(messageType)) {\n        this.messageListeners[messageType] = new Array();\n      }\n\n      this.messageListeners[messageType].push(listener);\n    }\n\n    // Erases the whole type from the message listener object\n    public removeMessageListenerType(messageType:string) {\n      this.log.debug(\"removing message listener type from message listener object\" + messageType);\n\n      if (!this.messageListeners.hasOwnProperty(messageType)) {\n        return\n      }\n\n      // foreach type of message listener\n      for(var key in this.messageListeners) {\n        if(key == messageType){\n          // foreach function in this particular type\n          delete this.messageListeners[key];\n          return;\n        }\n      }\n    }\n\n    public removeMessageListener(messageType:string, listener:(message:IMessage) => void){\n      this.log.debug(\"removing message listener \" + listener + \" for message type \" + messageType);\n\n      if (!this.messageListeners.hasOwnProperty(messageType)) {\n        return\n      }\n\n      // foreach type of message listener\n      for(var key in this.messageListeners) {\n        if(key == messageType){\n          // foreach function in this particular type\n          for(var i = 0; i < this.messageListeners[key].length; i++){\n            if(this.messageListeners[key][i] == listener){\n              this.messageListeners[key].splice(i,1);\n              return;\n            }\n          }\n        }\n      }\n    }\n\n    public sendMessage(message:IMessage) {\n      var self = this;\n      // In case of a closed connection => establish a new one\n      if (this.ws.readyState == WebSocket.CLOSING || this.ws.readyState === WebSocket.CLOSED) {\n        this.connect(this.configService.getWebsocketUrl());\n        // Because the connection process takes a while, you can't directly afterwards send a message to the server => thus the callback pattern\n        this.waitForConnection(function () {\n          self.ws.send(JSON.stringify(message));\n        }, 500)\n      } else if(this.ws.readyState === WebSocket.CONNECTING){ // Websocket ist still connecting => retrigger the sendMessage function\n        this.waitForConnection(function () {\n          self.sendMessage(message)},\n          500)\n      } else {\n        this.ws.send(JSON.stringify(message));\n      }\n    }\n\n    private waitForConnection = function (callback : () => void, interval : number) {\n      if (this.ws.readyState === WebSocket.OPEN) {\n        callback();\n      } else {\n        var self = this;\n        // Trigger the waitForConnection function again => usually isn't necessary\n        setTimeout(function () {\n          self.waitForConnection(callback, interval);\n        }, interval);\n      }\n    };\n\n    private onMessage(message:MessageEvent) {\n      this.log.debug(\"message received: \" + message);\n\n      var recvMessage = JSON.parse(message.data);\n      var messageType = recvMessage.type;\n\n      // TODO remove mapping\n      var notifyMessage:IMessage = {\n        type: recvMessage.type,\n        data: recvMessage.data,\n      }\n\n      if (this.messageListeners.hasOwnProperty(messageType)) {\n        this.messageListeners[messageType].forEach((listener) => listener(notifyMessage));\n      }\n\n      // notify angular about data changes\n      this.$rootScope.$digest();\n    }\n\n    private onOpen(message: Event) {\n      this.log.debug(\"WebSocket Open: \" + message);\n    }\n\n    private onError(error: ErrorEvent) {\n      this.log.error(\"WebSocket Error: \" + error);\n    }\n\n    private onClose(event: Event) {\n      this.log.debug(\"Websocket connection has been closed: \" + event);\n    }\n  }\n\n  /**\n   * @ngdoc service\n   * @name game.service:Game\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .service('MessageService', MessageService);\n}\n","///<reference path='../../typings/tsd.d.ts' />\nvar home;\n(function (home) {\n    'use strict';\n    /* @ngdoc object\n     * @name user\n     * @description\n     *\n     */\n    angular.module('user', [\n        'ngRoute'\n    ]);\n})(home || (home = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\n///<reference path='../../../typings/angularjs/angular-resource.d.ts' />\nvar User;\n(function (User) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        var UserService = (function () {\n            function UserService($resource, $q, configService, log) {\n                this.$resource = $resource;\n                this.$q = $q;\n                this.configService = configService;\n                this.log = log;\n                this.userResource = $resource(this.configService.getServiceUrl('/users'));\n            }\n            UserService.prototype.loadUserData = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                if (!this.userData) {\n                    this.userResource.get().$promise.then(function (user) {\n                        _this.userData = user;\n                        deferred.resolve(_this.userData);\n                    }).catch(function (err) {\n                        deferred.reject(err);\n                    });\n                }\n                else {\n                    deferred.resolve(this.userData);\n                }\n                return deferred.promise;\n            };\n            UserService.prototype.getCurrentUser = function () {\n                return this.userData;\n            };\n            UserService.prototype.saveUser = function (user) {\n                this.userData = user;\n                return this.userResource.save(user).$promise;\n            };\n            UserService.$inject = [\n                '$resource',\n                '$q',\n                'ConfigService',\n                'LoggerService'\n            ];\n            return UserService;\n        })();\n        /**\n         * @ngdoc service\n         * @name user.service:User\n         *\n         * @description\n         *\n         */\n        angular.module('user').service('UserService', UserService);\n    })(Services = User.Services || (User.Services = {}));\n})(User || (User = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar User;\n(function (User) {\n    var Controllers;\n    (function (Controllers) {\n        'use strict';\n        var UserCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function UserCtrl(userService, log) {\n                this.userService = userService;\n                this.log = log;\n                this.displayUser = userService.getCurrentUser();\n            }\n            UserCtrl.prototype.saveUser = function () {\n                this.displayUser.password = this.password;\n                var that = this;\n                this.userService.saveUser(this.displayUser).then(function (result) {\n                    that.log.info('Daten gespeichert', result);\n                }).catch(function (err) {\n                    that.log.error('Speichern fehlgeschlagen', err);\n                });\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            UserCtrl.$inject = [\n                'UserService',\n                'LoggerService'\n            ];\n            return UserCtrl;\n        })();\n        /**\n        * @ngdoc object\n        * @name user.controller:UserCtrl\n        *\n        * @description\n        *\n        */\n        angular.module('user').controller('UserCtrl', UserCtrl);\n    })(Controllers = User.Controllers || (User.Controllers = {}));\n})(User || (User = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar session;\n(function (session) {\n    'use strict';\n    /* @ngdoc object\n    * @name session\n    * @description\n    *\n    */\n    angular.module('session', [\n        'ngRoute'\n    ]);\n})(session || (session = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Session;\n(function (Session) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        var SessionService = (function () {\n            function SessionService($http, $q, configService, log) {\n                this.$http = $http;\n                this.$q = $q;\n                this.configService = configService;\n                this.log = log;\n            }\n            SessionService.prototype.login = function (username, password) {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.post(this.configService.getServiceUrl('/session/login'), { \"username\": username, \"password\": password }).then(function (data) {\n                    _this.setCurrentSession(data.data);\n                    deferred.resolve(_this.currentSession);\n                }).catch(function (err) {\n                    _this.log.debug('login failed', err);\n                    deferred.reject(err);\n                });\n                return deferred.promise;\n            };\n            SessionService.prototype.logout = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.$http.post(this.configService.getServiceUrl('/session/logout'), {}).then(function (data) {\n                    _this.setCurrentSession(data.data);\n                    deferred.resolve(_this.currentSession);\n                }).catch(function (err) {\n                    _this.log.debug('logout failed', err);\n                    deferred.reject(err);\n                });\n                return deferred.promise;\n            };\n            SessionService.prototype.isLoggedIn = function () {\n                return this.currentSession && this.currentSession.loggedId;\n            };\n            SessionService.prototype.getCurrentSession = function () {\n                return this.currentSession;\n            };\n            SessionService.prototype.loadCurrentSession = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                if (!this.currentSession) {\n                    this.$http.get(this.configService.getServiceUrl('/session/')).then(function (data) {\n                        _this.setCurrentSession(data.data);\n                        deferred.resolve(_this.currentSession);\n                    }).catch(function (err) {\n                        _this.log.debug('load current session failed', err);\n                        deferred.reject(err);\n                    });\n                }\n                else {\n                    deferred.resolve(this.currentSession);\n                }\n                return deferred.promise;\n            };\n            SessionService.prototype.getPlayerId = function () {\n                return this.currentSession.playerId;\n            };\n            SessionService.prototype.get = function () {\n                return 'LoginService';\n            };\n            SessionService.prototype.setCurrentSession = function (session) {\n                this.currentSession = session;\n                this.log.debug('current session set to playerId ' + this.currentSession.playerId + ' and ' + this.currentSession.username);\n            };\n            SessionService.$inject = [\n                '$http',\n                '$q',\n                'ConfigService',\n                'LoggerService'\n            ];\n            return SessionService;\n        })();\n        /**\n         * @ngdoc service\n         * @name login.service:LoginService\n         *\n         * @description\n         *\n         */\n        angular.module('session').service('SessionService', SessionService);\n    })(Services = Session.Services || (Session.Services = {}));\n})(Session || (Session = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Session;\n(function (Session) {\n    var Controllers;\n    (function (Controllers) {\n        'use strict';\n        var SessionCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function SessionCtrl(sessionService, appConfig, log) {\n                this.sessionService = sessionService;\n                this.appConfig = appConfig;\n                this.log = log;\n                this.currentSession = sessionService.getCurrentSession();\n                this.userLoggedIn = this.currentSession.loggedId;\n            }\n            SessionCtrl.prototype.login = function () {\n                var vm = this;\n                this.sessionService.login(this.username, this.password).then(function (session) {\n                    vm.currentSession = session;\n                    vm.userLoggedIn = session.loggedId;\n                }).catch(function (err) {\n                    vm.log.error('Login fehlgeschlagen');\n                });\n            };\n            SessionCtrl.prototype.logout = function () {\n                var vm = this;\n                this.sessionService.logout().then(function (session) {\n                    vm.currentSession = session;\n                    vm.userLoggedIn = session.loggedId;\n                }).catch(function (err) {\n                    vm.log.error('Logout fehlgeschlagen');\n                });\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            SessionCtrl.$inject = [\n                'SessionService',\n                'appConfig',\n                'LoggerService'\n            ];\n            return SessionCtrl;\n        })();\n        /**\n        * @ngdoc object\n        * @name login.controller:LoginCtrl\n        *\n        * @description\n        *\n        */\n        angular.module('session').controller('SessionCtrl', SessionCtrl);\n    })(Controllers = Session.Controllers || (Session.Controllers = {}));\n})(Session || (Session = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar home;\n(function (home) {\n    'use strict';\n    /* @ngdoc object\n    * @name home\n    * @description\n    *\n    */\n    angular.module('home', [\n        'ngRoute'\n    ]);\n})(home || (home = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Home;\n(function (Home) {\n    var Controllers;\n    (function (Controllers) {\n        'use strict';\n        var HomeCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function HomeCtrl() {\n            }\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            HomeCtrl.$inject = [\n            ];\n            return HomeCtrl;\n        })();\n        /**\n        * @ngdoc object\n        * @name home.controller:HomeCtrl\n        *\n        * @description\n        *\n        */\n        angular.module('home').controller('HomeCtrl', HomeCtrl);\n    })(Controllers = Home.Controllers || (Home.Controllers = {}));\n})(Home || (Home = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar game;\n(function (game) {\n    'use strict';\n    /* @ngdoc object\n    * @name game\n    * @description\n    *\n    */\n    angular.module('game', [\n        'ngRoute'\n    ]);\n})(game || (game = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Game;\n(function (Game) {\n    var Directives;\n    (function (Directives) {\n        'use strict';\n        var GameMove = (function () {\n            function GameMove() {\n                this.restrict = 'E';\n                //public scope = {};\n                this.replace = true;\n                this.templateUrl = 'game/directives/game-move-directive.tpl.html';\n            }\n            GameMove.prototype.link = function (scope, element, attrs) {\n                console.log(\"link scope \" + scope);\n            };\n            return GameMove;\n        })();\n        Directives.GameMove = GameMove;\n        angular.module('game').directive('gameMove', function () { return new GameMove(); });\n    })(Directives = Game.Directives || (Game.Directives = {}));\n})(Game || (Game = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar GameField;\n(function (GameField) {\n    'use strict';\n    /**\n    * @ngdoc directive\n    * @name game.directive:gameField\n    * @restrict EA\n    * @element\n    *\n    * @description\n    *\n    * @example\n      <example module=\"game\">\n        <file name=\"index.html\">\n          <game-field></game-field>\n        </file>\n      </example>\n    *\n    */\n    angular.module('game').directive('gameField', gameField);\n    function gameField() {\n        return {\n            restrict: 'E',\n            replace: true,\n            templateUrl: 'game/directives/game-field-directive.tpl.html'\n        };\n    }\n})(GameField || (GameField = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Game;\n(function (Game) {\n    var Controllers;\n    (function (Controllers) {\n        'use strict';\n        var GameCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function GameCtrl(log, gameService, $scope, sessionService, $location) {\n                this.log = log;\n                this.gameService = gameService;\n                this.$scope = $scope;\n                this.sessionService = sessionService;\n                this.$location = $location;\n                this.selectedMoveField = 3;\n                var that = this;\n            }\n            GameCtrl.prototype.getCurrentGame = function () {\n                return this.gameService.getGame();\n            };\n            GameCtrl.prototype.mouseOver = function (evt) {\n                var col = $(evt.target).data('x');\n                if (col != undefined) {\n                    this.selectedMoveField = col;\n                }\n            };\n            GameCtrl.prototype.keyDown = function (evt) {\n                var game = this.getCurrentGame();\n                var maxIndex = game.cells[0].length - 1;\n                var keyCode = evt.keyCode;\n                if (keyCode === 37 && this.selectedMoveField > 0) {\n                    this.selectedMoveField--;\n                }\n                else if (keyCode === 39 && this.selectedMoveField < maxIndex) {\n                    this.selectedMoveField++;\n                }\n                else if (keyCode === 13 || keyCode === 32 || keyCode === 40) {\n                    this.gameService.doMove(this.selectedMoveField);\n                }\n            };\n            GameCtrl.prototype.doMove = function (evt) {\n                var col = $(evt.target).data('x');\n                if (col != undefined) {\n                    this.gameService.doMove(col);\n                }\n            };\n            GameCtrl.prototype.getMoveFields = function () {\n                var cells = new Array();\n                var game = this.getCurrentGame();\n                for (var row = 0; row < game.cells[0].length; row++) {\n                    if (row === this.selectedMoveField) {\n                        cells.push(game.nextColor);\n                    }\n                    else {\n                        cells.push(0 /* Empty */);\n                    }\n                }\n                return cells;\n            };\n            GameCtrl.prototype.isCurrentUserOnMove = function () {\n                var playerId = this.sessionService.getPlayerId();\n                var nextPlayerId = this.getCurrentGame().nextPlayerId;\n                return playerId === nextPlayerId;\n            };\n            GameCtrl.prototype.isGameFinished = function () {\n                return this.getCurrentGame().state === 2 /* Finished */;\n            };\n            GameCtrl.prototype.isGameBroken = function () {\n                return this.getCurrentGame().state === 3 /* Broken */;\n            };\n            GameCtrl.prototype.getGameState = function () {\n                var gameState;\n                if (this.isGameFinished()) {\n                    if (this.isCurrentUserOnMove()) {\n                        gameState = {\n                            state: \"won\",\n                            message: \"Spiel gewonnen!\"\n                        };\n                    }\n                    else {\n                        gameState = {\n                            state: \"loose\",\n                            message: \"Spiel verloren!\"\n                        };\n                    }\n                }\n                else if (this.isGameBroken()) {\n                    gameState = {\n                        state: \"broken\",\n                        message: \"Spiel beendet!\"\n                    };\n                }\n                else {\n                    if (this.isCurrentUserOnMove()) {\n                        gameState = {\n                            state: \"play\",\n                            message: \"Zug ausführen!\"\n                        };\n                    }\n                    else {\n                        gameState = {\n                            state: \"wait\",\n                            message: \"Zug abwarten!\"\n                        };\n                    }\n                }\n                return gameState;\n            };\n            GameCtrl.prototype.restartGame = function () {\n                this.log.debug(\"restart game\");\n                this.gameService.restartGame();\n            };\n            GameCtrl.prototype.breakGame = function () {\n                var _this = this;\n                this.log.debug(\"break game\");\n                this.gameService.breakGame().then(function () {\n                    _this.$location.path('/lobby');\n                });\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            GameCtrl.$inject = [\n                'LoggerService',\n                'GameService',\n                '$scope',\n                'SessionService',\n                '$location'\n            ];\n            return GameCtrl;\n        })();\n        /**\n        * @ngdoc object\n        * @name game.controller:GameCtrl\n        *\n        * @description\n        *\n        */\n        angular.module('game').controller('GameCtrl', GameCtrl);\n    })(Controllers = Game.Controllers || (Game.Controllers = {}));\n})(Game || (Game = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar common;\n(function (common) {\n    'use strict';\n    /* @ngdoc object\n     * @name game\n     * @description\n     *\n     */\n    angular.module('common', [\n    ]);\n})(common || (common = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Common;\n(function (Common) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        var ClientMessage = (function () {\n            function ClientMessage(type, data) {\n                this.type = type;\n                this.data = data;\n            }\n            return ClientMessage;\n        })();\n        Services.ClientMessage = ClientMessage;\n        var MessageService = (function () {\n            function MessageService(log, $rootScope, configService, $http) {\n                this.log = log;\n                this.$rootScope = $rootScope;\n                this.configService = configService;\n                this.$http = $http;\n                this.messageListeners = {};\n                this.timerId = 0;\n                this.waitForConnection = function (callback, interval) {\n                    if (this.ws.readyState === WebSocket.OPEN) {\n                        callback();\n                    }\n                    else {\n                        var self = this;\n                        // Trigger the waitForConnection function again => usually isn't necessary\n                        setTimeout(function () {\n                            self.waitForConnection(callback, interval);\n                        }, interval);\n                    }\n                };\n                // Connect to the websocket server\n                var serverUrl = configService.getWebsocketUrl();\n                log.debug('trying to reach server ' + serverUrl + ' before connecting websocket');\n                this.connect(serverUrl);\n            }\n            MessageService.prototype.connect = function (baseWsUrl) {\n                this.log.debug('connecting websocket to ' + baseWsUrl);\n                var self = this;\n                this.ws = new WebSocket(baseWsUrl);\n                this.ws.onmessage = function (event) { return self.onMessage(event); };\n                this.ws.onopen = function (event) { return self.onOpen(event); };\n                this.ws.onerror = function (error) { return self.onError(error); };\n                this.ws.onclose = function (event) { return self.onClose(event); };\n            };\n            MessageService.prototype.addMessageListener = function (messageType, listener) {\n                this.log.debug(\"adding message listener \" + listener + \" for message type \" + messageType);\n                if (!this.messageListeners.hasOwnProperty(messageType)) {\n                    this.messageListeners[messageType] = new Array();\n                }\n                this.messageListeners[messageType].push(listener);\n            };\n            // Erases the whole type from the message listener object\n            MessageService.prototype.removeMessageListenerType = function (messageType) {\n                this.log.debug(\"removing message listener type from message listener object\" + messageType);\n                if (!this.messageListeners.hasOwnProperty(messageType)) {\n                    return;\n                }\n                for (var key in this.messageListeners) {\n                    if (key == messageType) {\n                        // foreach function in this particular type\n                        delete this.messageListeners[key];\n                        return;\n                    }\n                }\n            };\n            MessageService.prototype.removeMessageListener = function (messageType, listener) {\n                this.log.debug(\"removing message listener \" + listener + \" for message type \" + messageType);\n                if (!this.messageListeners.hasOwnProperty(messageType)) {\n                    return;\n                }\n                for (var key in this.messageListeners) {\n                    if (key == messageType) {\n                        for (var i = 0; i < this.messageListeners[key].length; i++) {\n                            if (this.messageListeners[key][i] == listener) {\n                                this.messageListeners[key].splice(i, 1);\n                                return;\n                            }\n                        }\n                    }\n                }\n            };\n            MessageService.prototype.sendMessage = function (message) {\n                var self = this;\n                // In case of a closed connection => establish a new one\n                if (this.ws.readyState == WebSocket.CLOSING || this.ws.readyState === WebSocket.CLOSED) {\n                    this.connect(this.configService.getWebsocketUrl());\n                    // Because the connection process takes a while, you can't directly afterwards send a message to the server => thus the callback pattern\n                    this.waitForConnection(function () {\n                        self.ws.send(JSON.stringify(message));\n                    }, 500);\n                }\n                else if (this.ws.readyState === WebSocket.CONNECTING) {\n                    this.waitForConnection(function () {\n                        self.sendMessage(message);\n                    }, 500);\n                }\n                else {\n                    this.ws.send(JSON.stringify(message));\n                }\n            };\n            MessageService.prototype.onMessage = function (message) {\n                this.log.debug(\"message received: \" + message);\n                var recvMessage = JSON.parse(message.data);\n                var messageType = recvMessage.type;\n                // TODO remove mapping\n                var notifyMessage = {\n                    type: recvMessage.type,\n                    data: recvMessage.data\n                };\n                if (this.messageListeners.hasOwnProperty(messageType)) {\n                    this.messageListeners[messageType].forEach(function (listener) { return listener(notifyMessage); });\n                }\n                // notify angular about data changes\n                this.$rootScope.$digest();\n            };\n            MessageService.prototype.onOpen = function (message) {\n                this.log.debug(\"WebSocket Open: \" + message);\n            };\n            MessageService.prototype.onError = function (error) {\n                this.log.error(\"WebSocket Error: \" + error);\n            };\n            MessageService.prototype.onClose = function (event) {\n                this.log.debug(\"Websocket connection has been closed: \" + event);\n            };\n            MessageService.$inject = [\n                'LoggerService',\n                '$rootScope',\n                'ConfigService',\n                '$http'\n            ];\n            return MessageService;\n        })();\n        /**\n         * @ngdoc service\n         * @name game.service:Game\n         *\n         * @description\n         *\n         */\n        angular.module('common').service('MessageService', MessageService);\n    })(Services = Common.Services || (Common.Services = {}));\n})(Common || (Common = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Common;\n(function (Common) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        var LoggerService = (function () {\n            function LoggerService($log) {\n                this.$log = $log;\n                toastr.options.timeOut = 3000;\n                toastr.options.showDuration = 1200;\n                toastr.options.hideDuration = 500;\n                toastr.options.positionClass = \"toast-top-right\";\n                toastr.options.closeButton = true;\n            }\n            LoggerService.prototype.error = function (message) {\n                var details = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    details[_i - 1] = arguments[_i];\n                }\n                toastr.error(message);\n                this.log(\"ERROR\", message, details);\n            };\n            LoggerService.prototype.warn = function (message) {\n                var details = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    details[_i - 1] = arguments[_i];\n                }\n                toastr.warning(message);\n                this.log(\"WARN \", message, details);\n            };\n            LoggerService.prototype.info = function (message) {\n                var details = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    details[_i - 1] = arguments[_i];\n                }\n                toastr.info(message);\n                this.log(\"INFO \", message, details);\n            };\n            LoggerService.prototype.debug = function (message) {\n                var details = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    details[_i - 1] = arguments[_i];\n                }\n                this.log(\"DEBUG\", message, details);\n            };\n            LoggerService.prototype.log = function (level, message) {\n                var details = [];\n                for (var _i = 2; _i < arguments.length; _i++) {\n                    details[_i - 2] = arguments[_i];\n                }\n                this.$log.log(new Date().toISOString() + \" \" + level + \" \" + message + \" \" + details.join(' '));\n            };\n            LoggerService.$inject = ['$log'];\n            return LoggerService;\n        })();\n        /**\n         * @ngdoc service\n         * @name common.service:LoggerService\n         *\n         * @description\n         *\n         */\n        angular.module('common').service('LoggerService', LoggerService);\n    })(Services = Common.Services || (Common.Services = {}));\n})(Common || (Common = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Common;\n(function (Common) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        var ConfigService = (function () {\n            function ConfigService(appConfig, $location) {\n                this.appConfig = appConfig;\n                this.$location = $location;\n            }\n            ConfigService.prototype.getServiceUrl = function (path) {\n                var baseUrl = this.appConfig.baseUrlPattern.replace('{host}', this.$location.host());\n                return baseUrl + path;\n            };\n            ConfigService.prototype.getWebsocketUrl = function () {\n                return this.appConfig.baseWsUrlPattern.replace('{host}', this.$location.host());\n            };\n            ConfigService.$inject = [\n                'appConfig',\n                '$location'\n            ];\n            return ConfigService;\n        })();\n        /**\n         * @ngdoc service\n         * @name game.service:Game\n         *\n         * @description\n         *\n         */\n        angular.module('common').service('ConfigService', ConfigService);\n    })(Services = Common.Services || (Common.Services = {}));\n})(Common || (Common = {}));\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Common;\n(function (Common) {\n    var Directives;\n    (function (Directives) {\n        'use strict';\n        angular.module('common').directive('mainMenu', mainMenu);\n        function mainMenu() {\n            return {\n                restrict: 'E',\n                controller: MainMenuCtrl,\n                controllerAs: 'mainMenu',\n                replace: true,\n                templateUrl: 'common/directives/main-menu-directive.tpl.html',\n                bindToController: true\n            };\n        }\n        var MainMenuCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function MainMenuCtrl(sessionService) {\n                this.sessionService = sessionService;\n            }\n            MainMenuCtrl.prototype.isUserLoggedIn = function () {\n                return this.sessionService.isLoggedIn();\n            };\n            MainMenuCtrl.prototype.getCurrentUsername = function () {\n                var session = this.sessionService.getCurrentSession();\n                return session ? session.username : null;\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            MainMenuCtrl.$inject = [\n                'SessionService'\n            ];\n            return MainMenuCtrl;\n        })();\n        Directives.MainMenuCtrl = MainMenuCtrl;\n    })(Directives = Common.Directives || (Common.Directives = {}));\n})(Common || (Common = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar chat;\n(function (chat) {\n    'use strict';\n    /* @ngdoc object\n    * @name chat\n    * @description\n    *\n    */\n    angular.module('chat', [\n    ]);\n})(chat || (chat = {}));\n\nvar chat;\n(function (chat) {\n    var directives;\n    (function (directives) {\n        \"use strict\";\n        var ChatWindow = (function () {\n            function ChatWindow() {\n                this.restrict = 'E';\n                this.scope = {\n                    chatModel: '=',\n                    chatSection: '@chatSection',\n                    id: '='\n                };\n                this.templateUrl = \"chat/views/chat-window-template.html\";\n            }\n            ChatWindow.prototype.link = function (scope, element, attrs) {\n                scope.sendMessage = function (message) {\n                    scope.chatModel.sendMessage(message);\n                    this.currentMessage = \"\";\n                };\n                scope.inputBoxKeypress = function (e) {\n                    if (e.which === 13) {\n                        var chatMsg = {\n                            message: $('#msgInput').val()\n                        };\n                        $('#msgInput').val('');\n                        scope.chatModel.sendMessage(chatMsg);\n                    }\n                };\n                // For directive implementations which don't use an attribute of id\n                scope.id = angular.isUndefined(scope.id) ? \"\" : scope.id;\n                // Store the section in the controller\n                scope.chatModel.storeChatSectionDataInCtrl(scope.chatSection, scope.id);\n                // Subscribe the chat for the particular section\n                scope.chatModel.subscribeToChatSectionEvents(scope.chatSection);\n                // Retrieve the chat history\n                scope.chatModel.fetchChatHistory(scope.chatSection, scope.id);\n                // Gets triggered as soon as the directive gets destroyed\n                scope.$on('$destroy', function () {\n                    // Subscribe the chat for the particular section\n                    scope.chatModel.unsubscribeToChatSectionEvents(scope.chatSection, scope.id);\n                });\n                scope.$watchCollection(function () {\n                    return scope.chatModel.chatHistory;\n                }, function (newChatHistory, oldChatHistory) {\n                    // Delete existing records\n                    var chatWindowDiv = $('.chat-output');\n                    if (newChatHistory !== oldChatHistory) {\n                        // Load the whole chat history\n                        if (oldChatHistory.length === 0) {\n                            chatWindowDiv.empty();\n                            for (var i = 0; i < newChatHistory.length; ++i) {\n                                chatWindowDiv.append($('<span><strong>[' + newChatHistory[i].creationDate + '&nbsp' + newChatHistory[i].from + ']</strong>&nbsp' + newChatHistory[i].message + '<br></span>'));\n                            }\n                        }\n                        else {\n                            var index = newChatHistory.length - 1;\n                            chatWindowDiv.append($('<span><strong>[' + newChatHistory[index].creationDate + '&nbsp' + newChatHistory[index].from + ']</strong>&nbsp' + newChatHistory[index].message + '<br></span>'));\n                        }\n                    }\n                });\n            };\n            ChatWindow.factory = function () {\n                var directive = function () { return new ChatWindow(); };\n                directive.$inject = [];\n                return directive;\n            };\n            ChatWindow.DirectoryName = \"chatWindow\";\n            return ChatWindow;\n        })();\n        directives.ChatWindow = ChatWindow;\n        angular.module('chat').directive(chat.directives.ChatWindow.DirectoryName, chat.directives.ChatWindow.factory());\n    })(directives = chat.directives || (chat.directives = {}));\n})(chat || (chat = {}));\n\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\n///<reference path='../../../typings/tsd.d.ts' />\nvar chat;\n(function (chat) {\n    var controllers;\n    (function (controllers) {\n        'use strict';\n        var ChatCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function ChatCtrl($scope, userService, messageService) {\n                this.$scope = $scope;\n                this.userService = userService;\n                this.messageService = messageService;\n                this.chatHistory = [];\n                this.initChatModel();\n            }\n            ChatCtrl.prototype.initChatModel = function () {\n                this.$scope.chatModel = {\n                    chatHistory: this.chatHistory,\n                    userService: this.userService,\n                    messageService: this.messageService,\n                    storeChatSectionDataInCtrl: this.storeChatSectionDataInCtrl,\n                    subscribeToChatSectionEvents: this.subscribeToChatSectionEvents,\n                    unsubscribeToChatSectionEvents: this.unsubscribeToChatSectionEvents,\n                    fetchChatHistory: this.fetchChatHistory,\n                    sendMessage: this.sendMessage,\n                    chatMessageListener: this.chatMessageListener\n                };\n            };\n            ChatCtrl.prototype.storeChatSectionDataInCtrl = function (section, id) {\n                // Store the section additionally to the directive in the controller\n                this.chatSection = section;\n                this.id = id;\n            };\n            ChatCtrl.prototype.subscribeToChatSectionEvents = function (section) {\n                var self = this;\n                // Subscribe for the chat section for incoming messages\n                this.messageService.addMessageListener(section + \"ChatMessage\", this.chatMessageListener(self));\n                // Subscribe for incoming messages to load the chat history\n                this.messageService.addMessageListener(section + \"ChatHistory\", function (message) {\n                    if (message.data.chatHistory.length > 0) {\n                        $('#chatHistoryPlaceholder').hide();\n                        self.chatHistory = message.data.chatHistory;\n                    }\n                    else {\n                        $('#chatHistoryPlaceholder').show();\n                    }\n                });\n            };\n            ChatCtrl.prototype.chatMessageListener = function (self) {\n                return function (message) {\n                    self.chatHistory.push(message.data.chatMessageObj);\n                };\n            };\n            ChatCtrl.prototype.unsubscribeToChatSectionEvents = function (section, id) {\n                // Unsubscribe to the client side message service\n                this.messageService.removeMessageListenerType(section + \"ChatMessage\");\n                this.messageService.removeMessageListenerType(section + \"ChatHistory\");\n                // Unsubscribe to the server side chat service\n                var messageObj = new UnsubscribeToChatSectionMessage({\n                    chatSectionPrefix: section,\n                    id: id\n                });\n                this.messageService.sendMessage(messageObj);\n            };\n            // Send a chat message to the server\n            ChatCtrl.prototype.sendMessage = function (message) {\n                var messageObj = new ChatInputMessage({\n                    chatSectionPrefix: this.chatSection,\n                    chatMessageObj: message,\n                    id: this.id\n                });\n                this.messageService.sendMessage(messageObj);\n            };\n            // Send a request for the chat history to the server\n            ChatCtrl.prototype.fetchChatHistory = function (section, id) {\n                var messageObj = new ChatHistoryMessage({\n                    chatSectionPrefix: section,\n                    id: id,\n                    chatHistory: null\n                });\n                // Send a request in order to retrieve the chat history of the given section\n                this.messageService.sendMessage(messageObj);\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            ChatCtrl.$inject = [\n                '$scope',\n                'UserService',\n                'MessageService'\n            ];\n            return ChatCtrl;\n        })();\n        var ChatMessage = (function () {\n            function ChatMessage(message) {\n                this.message = message.message;\n                this.creationDate = message.creationDate;\n                this.from = message.from;\n                this.to = message.to;\n            }\n            return ChatMessage;\n        })();\n        controllers.ChatMessage = ChatMessage;\n        ;\n        var ClientMessage = (function () {\n            function ClientMessage(type, data, id) {\n                this.type = type;\n                this.data = data;\n                this.id = id;\n            }\n            return ClientMessage;\n        })();\n        controllers.ClientMessage = ClientMessage;\n        var UnsubscribeToChatSectionMessage = (function (_super) {\n            __extends(UnsubscribeToChatSectionMessage, _super);\n            function UnsubscribeToChatSectionMessage(data) {\n                _super.call(this, data.chatSectionPrefix + data.id + UnsubscribeToChatSectionMessage.NAME, data, data.id);\n            }\n            UnsubscribeToChatSectionMessage.NAME = \"ChatUnsubscribe\";\n            return UnsubscribeToChatSectionMessage;\n        })(ClientMessage);\n        controllers.UnsubscribeToChatSectionMessage = UnsubscribeToChatSectionMessage;\n        var ChatInputMessage = (function (_super) {\n            __extends(ChatInputMessage, _super);\n            function ChatInputMessage(chatData) {\n                _super.call(this, chatData.chatSectionPrefix + ChatInputMessage.NAME, chatData, chatData.id);\n            }\n            ChatInputMessage.NAME = \"ChatMessage\";\n            return ChatInputMessage;\n        })(ClientMessage);\n        controllers.ChatInputMessage = ChatInputMessage;\n        var ChatHistoryMessage = (function (_super) {\n            __extends(ChatHistoryMessage, _super);\n            function ChatHistoryMessage(chatData) {\n                _super.call(this, chatData.chatSectionPrefix + ChatHistoryMessage.NAME, chatData, chatData.id);\n            }\n            ChatHistoryMessage.NAME = \"ChatHistory\";\n            return ChatHistoryMessage;\n        })(ClientMessage);\n        controllers.ChatHistoryMessage = ChatHistoryMessage;\n        /**\n        * @ngdoc object\n        * @name chat.controller:ChatCtrl\n        *\n        * @description\n        *\n        */\n        angular.module('chat').controller('ChatCtrl', ChatCtrl);\n    })(controllers = chat.controllers || (chat.controllers = {}));\n})(chat || (chat = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar home;\n(function (home) {\n    'use strict';\n    angular.module('user').config(config);\n    function config($routeProvider) {\n        $routeProvider.when('/user', {\n            templateUrl: 'user/views/user.tpl.html',\n            controller: 'UserCtrl',\n            controllerAs: 'user',\n            resolve: {\n                'Something': ['UserService', function (userService) {\n                    return userService.loadUserData();\n                }]\n            }\n        });\n    }\n})(home || (home = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar session;\n(function (session) {\n    'use strict';\n    angular.module('session').config(config);\n    function config($routeProvider) {\n        $routeProvider.when('/session', {\n            templateUrl: 'session/views/session.tpl.html',\n            controller: 'SessionCtrl',\n            controllerAs: 'session',\n            resolve: {\n                'Something': ['SessionService', function (sessionService) {\n                    return sessionService.loadCurrentSession();\n                }]\n            }\n        });\n    }\n})(session || (session = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar lobby;\n(function (lobby) {\n    'use strict';\n    /* @ngdoc object\n     * @name lobby\n     * @description\n     *\n     */\n    angular.module('lobby', [\n        'ngRoute',\n        'ngResource',\n        'ngAnimate'\n    ]);\n})(lobby || (lobby = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar lobby;\n(function (lobby) {\n    'use strict';\n    angular.module('lobby').config(config);\n    function config($routeProvider) {\n        $routeProvider.when('/lobby', {\n            templateUrl: 'lobby/views/lobby.tpl.html',\n            controller: 'LobbyCtrl',\n            controllerAs: 'lobby',\n            resolve: {\n                'LoadUserData': ['UserService', function (userService) {\n                    return userService.loadUserData();\n                }]\n            }\n        });\n    }\n})(lobby || (lobby = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\n/// <reference path='controllers/lobby-controller.ts' />\n/// <reference path='directives/lobby-directive.ts' />\n/// <reference path='interfaces/lobby-interface.ts' />\n/// <reference path='models/lobby-game.ts' />\n/// <reference path='services/lobby-storage.ts' />\n/// <reference path='../game/services/game-service.ts' />\n/// <reference path='constants/lobby-constants.ts' />\n\n/// <reference path='../_lobby.ts' />\n// Error : app\\lobby\\constants\\lobby-constants.ts(6,16): 1056 Accessors are only available when targeting ECMAScript 5 and higher.\n/*module lobby.constants {\n \"use strict\";\n  export class Constants {\n\n    static get Default() : any {\n      return {\n        baseUrl: 'http://localhost:2999'\n      };\n    }\n  }\n}*/\n/* .constant('appConstant', lobby.constants.Constants.Default);*/\n\n///<reference path='../../../typings/tsd.d.ts' />\nvar Game;\n(function (Game) {\n    var Services;\n    (function (Services) {\n        'use strict';\n        (function (Color) {\n            Color[Color[\"Empty\"] = 0] = \"Empty\";\n            Color[Color[\"Red\"] = 1] = \"Red\";\n            Color[Color[\"Yellow\"] = 2] = \"Yellow\";\n        })(Services.Color || (Services.Color = {}));\n        var Color = Services.Color;\n        (function (GameState) {\n            GameState[GameState[\"New\"] = 0] = \"New\";\n            GameState[GameState[\"Running\"] = 1] = \"Running\";\n            GameState[GameState[\"Finished\"] = 2] = \"Finished\";\n            GameState[GameState[\"Broken\"] = 3] = \"Broken\";\n        })(Services.GameState || (Services.GameState = {}));\n        var GameState = Services.GameState;\n        var GameService = (function () {\n            function GameService($resource, $q, log, messageService, configService) {\n                this.$resource = $resource;\n                this.$q = $q;\n                this.log = log;\n                this.messageService = messageService;\n                this.configService = configService;\n                var that = this;\n                var gameUrl = this.configService.getServiceUrl('/game/:gameId');\n                that.gameResource = $resource(gameUrl, { gameId: '@_id' }, {\n                    create: { method: 'POST' },\n                    move: { method: 'POST', url: gameUrl + '/move' },\n                    restart: { method: 'POST', url: gameUrl + '/restart' },\n                    break: { method: 'POST', url: gameUrl + '/break' }\n                });\n                // register for game update messages concerns to current game\n                messageService.addMessageListener(GameUpdateMessage.NAME, function (message) {\n                    if (that.gameId === message.data._id) {\n                        that.log.debug('message reveiced ' + message);\n                        that.setGame(message.data);\n                    }\n                });\n            }\n            GameService.prototype.getGame = function () {\n                return this.game;\n            };\n            GameService.prototype.getGameId = function () {\n                return this.gameId;\n            };\n            GameService.prototype.newGame = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                if (!this.game) {\n                    this.gameResource.create().$promise.then(function (data) {\n                        _this.setGame(data);\n                        deferred.resolve(_this.game);\n                    }).catch(function (err) {\n                        _this.log.debug('new game failed', err);\n                        deferred.reject(err);\n                    });\n                }\n                else {\n                    deferred.resolve(this.game);\n                }\n                return deferred.promise;\n            };\n            GameService.prototype.loadGame = function (gameId) {\n                var _this = this;\n                var deferred = this.$q.defer();\n                // load game if game id changed only\n                if (this.gameId !== gameId) {\n                    this.gameResource.get({ gameId: gameId }).$promise.then(function (data) {\n                        _this.setGame(data);\n                        deferred.resolve(_this.game);\n                    }).catch(function (err) {\n                        _this.log.debug('load game failed', err);\n                        deferred.reject(err);\n                    });\n                }\n                else {\n                    deferred.resolve(this.game);\n                }\n                this.gameId = gameId;\n                return deferred.promise;\n            };\n            GameService.prototype.doMove = function (col) {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.gameResource.move({ col: col }, this.game).$promise.then(function (data) {\n                    _this.setGame(data);\n                    deferred.resolve(_this.game);\n                }).catch(function (err) {\n                    _this.log.debug('do move failed', err);\n                    deferred.reject(err);\n                });\n                return deferred.promise;\n            };\n            GameService.prototype.restartGame = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.gameResource.restart(this.game).$promise.then(function (data) {\n                    _this.setGame(data);\n                    deferred.resolve(_this.game);\n                }).catch(function (err) {\n                    _this.log.debug('restart game failed', err);\n                    deferred.reject(err);\n                });\n                return deferred.promise;\n            };\n            GameService.prototype.breakGame = function () {\n                var _this = this;\n                var deferred = this.$q.defer();\n                this.gameResource.break(this.game).$promise.then(function (data) {\n                    _this.setGame(data);\n                    deferred.resolve(_this.game);\n                }).catch(function (err) {\n                    _this.log.debug('break game failed', err);\n                    deferred.reject(err);\n                });\n                return deferred.promise;\n            };\n            GameService.prototype.setGame = function (game) {\n                this.game = game;\n                this.gameId = game._id;\n            };\n            GameService.$inject = [\n                '$resource',\n                '$q',\n                'LoggerService',\n                'MessageService',\n                'ConfigService'\n            ];\n            return GameService;\n        })();\n        var GameUpdateMessage = (function () {\n            function GameUpdateMessage() {\n                this.type = GameUpdateMessage.NAME;\n            }\n            GameUpdateMessage.NAME = \"GameUpdateMessage\";\n            return GameUpdateMessage;\n        })();\n        /**\n         * @ngdoc service\n         * @name game.service:Game\n         *\n         * @description\n         *\n         */\n        angular.module('game').service('GameService', GameService);\n    })(Services = Game.Services || (Game.Services = {}));\n})(Game || (Game = {}));\n\n/// <reference path='../_lobby.ts' />\nvar lobby;\n(function (lobby) {\n    var services;\n    (function (services) {\n        \"use strict\";\n        var LobbyStorage = (function () {\n            function LobbyStorage($http, $resource, configService, messageService, $location) {\n                this.$http = $http;\n                this.$resource = $resource;\n                this.configService = configService;\n                this.messageService = messageService;\n                this.$location = $location;\n                // register for game update messages concerns to current game\n                messageService.addMessageListener(RoomUpdateMessage.NAME, function (message) {\n                    $location.path('/game/' + message.data.gameId);\n                });\n            }\n            LobbyStorage.prototype.LobbyRoom = function () {\n                return this.$resource(this.configService.getServiceUrl('/lobby/:id'), { id: '@id' });\n            };\n            LobbyStorage.$inject = [\n                '$http',\n                '$resource',\n                'ConfigService',\n                'MessageService',\n                '$location'\n            ];\n            return LobbyStorage;\n        })();\n        services.LobbyStorage = LobbyStorage;\n        var RoomUpdateMessage = (function () {\n            function RoomUpdateMessage() {\n                this.type = RoomUpdateMessage.NAME;\n            }\n            RoomUpdateMessage.NAME = \"RoomUpdateMessage\";\n            return RoomUpdateMessage;\n        })();\n    })(services = lobby.services || (lobby.services = {}));\n})(lobby || (lobby = {}));\nangular.module('lobby').service('lobbyStorage', lobby.services.LobbyStorage);\n\n/// <reference path='../_lobby.ts' />\nvar lobby;\n(function (lobby) {\n    var models;\n    (function (models) {\n        \"use strict\";\n        var Room = (function () {\n            function Room() {\n            }\n            return Room;\n        })();\n        models.Room = Room;\n    })(models = lobby.models || (lobby.models = {}));\n})(lobby || (lobby = {}));\n\n/**\n * Created by Alexander on 04.08.2015.\n */\nvar lobby;\n(function (lobby) {\n    var interfaces;\n    (function (interfaces) {\n        \"use strict\";\n        var Room = (function () {\n            function Room(room) {\n                if (room !== null) {\n                    this.roomId = room.roomId;\n                    this.name = room.name;\n                    this.status = room.status;\n                    this.creationTime = room.creationTime;\n                    this.players = room.players;\n                    this.isDelete = room.isDelete;\n                    this.isJoin = room.isJoin;\n                    this.gameId = room.gameId;\n                }\n            }\n            return Room;\n        })();\n        interfaces.Room = Room;\n    })(interfaces = lobby.interfaces || (lobby.interfaces = {}));\n})(lobby || (lobby = {}));\n\nvar lobby;\n(function (lobby) {\n    var directives;\n    (function (directives) {\n        \"use strict\";\n        var StopEvent = (function () {\n            function StopEvent() {\n                this.restrict = 'A';\n                this.link = function (scope, element, attrs) {\n                    element.bind('click', function (e) {\n                        e.stopPropagation();\n                    });\n                };\n            }\n            StopEvent.factory = function () {\n                var directive = function () { return new StopEvent(); };\n                return directive;\n            };\n            StopEvent.DirectoryName = \"stopEvent\";\n            return StopEvent;\n        })();\n        directives.StopEvent = StopEvent;\n        var RoomValidator = (function () {\n            function RoomValidator() {\n                this.restrict = 'A';\n                this.require = 'ngModel';\n                this.link = function (scope, element, attrs, ctrl) {\n                    ctrl.$validators.room = function (modelValue, viewValue) {\n                        var ROOM_REGEXP = /^\\w+$/;\n                        if (ROOM_REGEXP.test(viewValue)) {\n                            return true;\n                        }\n                        return false;\n                    };\n                };\n            }\n            RoomValidator.factory = function () {\n                var directive = function () { return new RoomValidator(); };\n                return directive;\n            };\n            RoomValidator.DirectoryName = \"room\";\n            return RoomValidator;\n        })();\n        directives.RoomValidator = RoomValidator;\n        var ActionMessageDisplay = (function () {\n            function ActionMessageDisplay($timeout) {\n                var _this = this;\n                this.restrict = 'E';\n                this.transclude = true;\n                this.templateUrl = \"lobby/views/action-message.html\";\n                this.link = function ($scope, element, attrs, ctrl) {\n                    $scope.$watch(function () {\n                        return $scope.lobby.actionMessage;\n                    }, function (newValue, oldValue) {\n                        if (oldValue.isError === null && newValue.isError !== null) {\n                            if (newValue.isError) {\n                                element.find('div:first').addClass('message-panel-error');\n                            }\n                            else if (!newValue.isError) {\n                                element.find('div:last').addClass('message-panel-success');\n                            }\n                            _this.$timeout(function () {\n                                $scope.lobby.actionMessage.isError = null;\n                            }, 5000);\n                        }\n                    });\n                };\n                this.$timeout = $timeout;\n            }\n            ActionMessageDisplay.factory = function () {\n                var directive = function ($timeout) { return new ActionMessageDisplay($timeout); };\n                directive.$inject = ['$timeout'];\n                return directive;\n            };\n            ActionMessageDisplay.DirectoryName = \"actionMessageDisplay\";\n            return ActionMessageDisplay;\n        })();\n        directives.ActionMessageDisplay = ActionMessageDisplay;\n    })(directives = lobby.directives || (lobby.directives = {}));\n})(lobby || (lobby = {}));\nangular.module('lobby').directive(lobby.directives.StopEvent.DirectoryName, lobby.directives.StopEvent.factory()).directive(lobby.directives.RoomValidator.DirectoryName, lobby.directives.RoomValidator.factory()).directive(lobby.directives.ActionMessageDisplay.DirectoryName, lobby.directives.ActionMessageDisplay.factory());\n\n/// <reference path='../_lobby.ts'/>\nvar __extends = this.__extends || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar lobby;\n(function (lobby) {\n    var controllers;\n    (function (controllers) {\n        'use strict';\n        var LobbyCtrl = (function () {\n            // dependencies are injected via AngularJS $injector\n            function LobbyCtrl($scope, $log, $window, $rootScope, lobbyStorage, userService, $interval) {\n                this.$scope = $scope;\n                this.$log = $log;\n                this.$window = $window;\n                this.$rootScope = $rootScope;\n                this.lobbyStorage = lobbyStorage;\n                this.userService = userService;\n                this.$interval = $interval;\n                this.lobbyData = [];\n                this.gameCreation = true;\n                this.gameEditing = true;\n                this.currentItem = new lobby.interfaces.Room(null);\n                this.actionMessage = new ActionMessage(null, null);\n                // Sorting the lobby list\n                this.orderBy = \"roomId\";\n                this.isDesc = false;\n                var self = this;\n                this.displayUser = userService.getCurrentUser();\n                this.getRooms(this)();\n                this.lobbyInterval = $interval(this.getRooms(this), 3000);\n                // Set up the tooltip plugin\n                var htmlBody = $(\"body\");\n                $(document).ready(function () {\n                    htmlBody.tooltip({ selector: '[data-toggle=tooltip]' });\n                });\n                $scope.$on('$destroy', function () {\n                    self.stopInterval(self)();\n                });\n            }\n            // Helper functions\n            LobbyCtrl.prototype.toggleNewGame = function () {\n                this.gameEditing = true;\n                this.gameCreation = this.gameCreation === false ? true : false;\n            };\n            LobbyCtrl.prototype.toggleEditingGame = function () {\n                this.gameCreation = true;\n                this.gameEditing = this.gameEditing === false ? true : false;\n            };\n            LobbyCtrl.prototype.editRoom = function (room) {\n                this.currentItem.name = room.name;\n                this.currentItem.roomId = room.roomId;\n                this.toggleEditingGame();\n            };\n            LobbyCtrl.prototype.joinRoom = function (room) {\n                room.isJoin = true;\n                this.updateRoom(room);\n            };\n            LobbyCtrl.prototype.getPositionOfElement = function (array, element, value) {\n                var pos = -1;\n                for (var i = 0, len = array.length; i < len; i++) {\n                    if (array[i][element] == value)\n                        pos = i;\n                }\n                return pos;\n            };\n            LobbyCtrl.prototype.getHighestValue = function (array, element, seed) {\n                var value = seed;\n                for (var i = 0, len = array.length; i < len; i++) {\n                    if (array[i][element] > value) {\n                        value = array[i][element];\n                    }\n                }\n                return value;\n            };\n            LobbyCtrl.prototype.reorderList = function (orderBy) {\n                // Double clicking the arrow => swap from ASC to DESC\n                if (this.orderBy === orderBy) {\n                    this.isDesc = this.isDesc ? false : true;\n                }\n                else {\n                    this.orderBy = orderBy;\n                    this.isDesc = false;\n                }\n            };\n            LobbyCtrl.prototype.stopInterval = function (self) {\n                return function () {\n                    if (angular.isDefined(self.lobbyInterval)) {\n                        self.$interval.cancel(self.lobbyInterval);\n                        self.lobbyInterval = undefined;\n                    }\n                };\n            };\n            // CRUD Operations with $resources\n            // CREATE\n            LobbyCtrl.prototype.createRoom = function (room) {\n                var self = this;\n                var nextRoomId = this.getHighestValue(this.lobbyData, \"roomId\", -1) + 1;\n                var roomRes = this.lobbyStorage.LobbyRoom();\n                roomRes.get({ id: nextRoomId }, function (newRoom) {\n                    newRoom.name = room.name;\n                    newRoom.$save(function (room) {\n                        self.lobbyData.push(room);\n                        self.actionMessage = new lobby.controllers.ActionMessageSuccess({\n                            isError: false,\n                            data: \"The room has been created!\"\n                        });\n                    }, function (err) {\n                        self.actionMessage = new lobby.controllers.ActionMessageError({\n                            isError: true,\n                            status: err.status,\n                            statusText: err.statusText,\n                            data: err.data\n                        });\n                    });\n                });\n                this.toggleNewGame();\n            };\n            // DELETE\n            LobbyCtrl.prototype.deleteRoom = function (room) {\n                var self = this;\n                var pos = this.getPositionOfElement(self.lobbyData, \"roomId\", room.roomId);\n                var roomRes = this.lobbyStorage.LobbyRoom();\n                roomRes.get({ id: room.roomId }, function (room) {\n                    room.isDelete = true;\n                    room.$save(function (room) {\n                        self.lobbyData.splice(pos, 1);\n                        self.actionMessage = new lobby.controllers.ActionMessageSuccess({\n                            isError: false,\n                            data: \"The room has been deleted!\"\n                        });\n                    }, function (err) {\n                        self.actionMessage = new lobby.controllers.ActionMessageError({\n                            isError: true,\n                            status: err.status,\n                            statusText: err.statusText,\n                            data: err.data\n                        });\n                    });\n                });\n            };\n            // GET\n            LobbyCtrl.prototype.getRooms = function (self) {\n                return function () {\n                    var res = self.lobbyStorage.LobbyRoom().query(function () {\n                        self.lobbyData = res;\n                    }, function (err) {\n                        //   self.actionMessage = new lobby.controllers.ActionMessageError({\n                        //  isError: true,\n                        //  status: err.status,\n                        //  statusText: err.statusText,\n                        //  data: err.data\n                        //});\n                    });\n                };\n            };\n            // UPDATE\n            LobbyCtrl.prototype.updateRoom = function (newRoom) {\n                var self = this;\n                var pos = this.getPositionOfElement(self.lobbyData, \"roomId\", newRoom.roomId);\n                var roomRes = this.lobbyStorage.LobbyRoom();\n                roomRes.get({ id: newRoom.roomId }, function (room) {\n                    room.name = newRoom.name; // Update the name of the room\n                    room.isJoin = newRoom.isJoin || null;\n                    room.$save(function (room) {\n                        self.lobbyData[pos] = room;\n                        self.actionMessage = new lobby.controllers.ActionMessageSuccess({\n                            isError: false,\n                            data: \"Your room has been updated!\"\n                        });\n                    }, function (err) {\n                        self.actionMessage = new lobby.controllers.ActionMessageError({\n                            isError: true,\n                            status: err.status,\n                            statusText: err.statusText,\n                            data: err.data\n                        });\n                    });\n                });\n            };\n            // $inject annotation.\n            // It provides $injector with information about dependencies to be injected into constructor\n            // it is better to have it close to the constructor, because the parameters must match in count and type.\n            // See http://docs.angularjs.org/guide/di\n            LobbyCtrl.$inject = [\n                '$scope',\n                '$log',\n                '$window',\n                '$rootScope',\n                'lobbyStorage',\n                'UserService',\n                '$interval'\n            ];\n            return LobbyCtrl;\n        })();\n        // Action Message Classes (share the common data property which is either the error or a normal message towards the user)\n        var ActionMessage = (function () {\n            function ActionMessage(data, isError) {\n                this.data = data;\n                this.isError = isError;\n            }\n            return ActionMessage;\n        })();\n        controllers.ActionMessage = ActionMessage;\n        var ActionMessageError = (function (_super) {\n            __extends(ActionMessageError, _super);\n            function ActionMessageError(messageObj) {\n                this.status = messageObj.status;\n                this.statusText = messageObj.statusText;\n                _super.call(this, messageObj.data, messageObj.isError);\n            }\n            return ActionMessageError;\n        })(ActionMessage);\n        controllers.ActionMessageError = ActionMessageError;\n        var ActionMessageSuccess = (function (_super) {\n            __extends(ActionMessageSuccess, _super);\n            function ActionMessageSuccess(messageObj) {\n                _super.call(this, messageObj.data, messageObj.isError);\n            }\n            return ActionMessageSuccess;\n        })(ActionMessage);\n        controllers.ActionMessageSuccess = ActionMessageSuccess;\n        var ClientMessage = (function () {\n            function ClientMessage(type, data, id) {\n                this.type = type;\n                this.data = data;\n                this.id = id;\n            }\n            return ClientMessage;\n        })();\n        controllers.ClientMessage = ClientMessage;\n        /**\n         * @ngdoc object\n         * @name lobby.controller:LobbyCtrl\n         *\n         * @description\n         *\n         */\n        angular.module('lobby').controller('LobbyCtrl', LobbyCtrl);\n    })(controllers = lobby.controllers || (lobby.controllers = {}));\n})(lobby || (lobby = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar home;\n(function (home) {\n    'use strict';\n    angular.module('home').config(config);\n    function config($routeProvider) {\n        $routeProvider.when('/home', {\n            templateUrl: 'home/views/home.tpl.html',\n            controller: 'HomeCtrl',\n            controllerAs: 'home'\n        });\n    }\n})(home || (home = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar game;\n(function (game) {\n    'use strict';\n    angular.module('game').config(config);\n    function config($routeProvider) {\n        $routeProvider.when('/game', {\n            templateUrl: 'game/views/game.tpl.html',\n            controller: 'GameCtrl',\n            controllerAs: 'game',\n            resolve: {\n                newGame: ['GameService', 'SessionService', function (gameService, sessionService) {\n                    return sessionService.loadCurrentSession().then(function (result) {\n                        return gameService.newGame();\n                    });\n                }]\n            }\n        }).when('/game/:gameId', {\n            templateUrl: 'game/views/game.tpl.html',\n            controller: 'GameCtrl',\n            controllerAs: 'game',\n            resolve: {\n                loadGame: ['GameService', '$route', function (gameService, $route) {\n                    return gameService.loadGame($route.current.params.gameId);\n                }]\n            }\n        });\n    }\n})(game || (game = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\nvar chat;\n(function (chat) {\n    'use strict';\n    angular.module('chat');\n})(chat || (chat = {}));\n\n///<reference path='../../typings/tsd.d.ts' />\n\n///<reference path='../typings/tsd.d.ts' />\nvar vierGewinnt6;\n(function (vierGewinnt6) {\n    'use strict';\n    /* @ngdoc object\n     * @name vierGewinnt6\n     * @description\n     *\n     */\n    angular.module('vierGewinnt6', [\n        'ngRoute',\n        'ngResource',\n        'mgcrea.ngStrap',\n        'home',\n        'game',\n        'lobby',\n        'user',\n        'session',\n        'common',\n        'chat'\n    ]).constant('appConfig', {\n        baseUrlPattern: 'http://{host}:2999',\n        baseWsUrlPattern: 'ws://{host}:2999'\n    });\n})(vierGewinnt6 || (vierGewinnt6 = {}));\n\n///<reference path='../typings/tsd.d.ts' />\nvar vierGewinnt6;\n(function (vierGewinnt6) {\n    'use strict';\n    angular.module('vierGewinnt6').config(config).run(init);\n    function config($routeProvider, $httpProvider) {\n        $routeProvider.otherwise({\n            redirectTo: '/home'\n        });\n        $httpProvider.defaults.withCredentials = true;\n    }\n    /**\n     * Resolve load current session for each route and catch route change errors globally\n     * @param $route\n     * @param $rootScope\n     * @param $location\n     * @param LoggerService\n     */\n    function init($route, $rootScope, $location, LoggerService) {\n        for (var r in $route.routes) {\n            var route = $route.routes[r];\n            route.resolve = route.resolve ? route.resolve : {};\n            route.resolve['LoadCurrentSession'] = ['SessionService', function (sessionService) {\n                return sessionService.loadCurrentSession();\n            }];\n        }\n        ;\n        $rootScope.$on(\"$routeChangeError\", function (evt, current, previous, rejection) {\n            if (rejection && rejection.status && rejection.status === 401) {\n                $location.path(\"/session\"); // redirect to login screen on unauthorized error\n            }\n            else {\n                LoggerService.warn('route change error', rejection);\n            }\n        });\n    }\n})(vierGewinnt6 || (vierGewinnt6 = {}));\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('user/views/user.tpl.html',\n    '<div class=\"container-fluid\">\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <header class=\"col-xs-12 col-sm-12\">\\n' +\n    '      <h2>Einstellungen</h2>\\n' +\n    '      <p>Benutzername und Passwort ändern</p>\\n' +\n    '    </header>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <section class=\"col-xs-6 col-sm-6\">\\n' +\n    '      <form name=\"userForm\" ng-submit=\"user.saveUser()\">\\n' +\n    '        <div class=\"form-group has-feedback\" ng-class=\"{\\'has-success\\': userForm.name.$valid, \\'has-error\\': userForm.name.$invalid }\">\\n' +\n    '          <label for=\"name\">Name</label>\\n' +\n    '          <input ng-model=\"user.displayUser.name\" type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Name\" required ng-pattern=\"/^[a-zA-Z0-9]{3,15}$/\">\\n' +\n    '          <span class=\"glyphicon form-control-feedback\" ng-class=\"{\\'glyphicon-ok\\': userForm.name.$valid, \\'glyphicon-remove\\': userForm.name.$invalid}\" aria-hidden=\"true\"></span>\\n' +\n    '          <span class=\"help-block\">Drei bis 15 alphanumerische Zeichen erforderlich.</span>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"form-group has-feedback\" ng-class=\"{\\'has-success\\': userForm.password.$valid, \\'has-error\\': userForm.password.$invalid }\">\\n' +\n    '          <label for=\"password\">Passwort</label>\\n' +\n    '          <input ng-model=\"user.password\" type=\"password\" class=\"form-control has-error\" name=\"password\" id=\"password\" placeholder=\"Password\" required ng-minlength=\"3\">\\n' +\n    '          <span class=\"glyphicon form-control-feedback\" ng-class=\"{\\'glyphicon-ok\\': userForm.password.$valid, \\'glyphicon-remove\\': userForm.password.$invalid}\" aria-hidden=\"true\"></span>\\n' +\n    '          <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"form-group has-feedback\" ng-class=\"{\\'has-success\\': userForm.passwordCheck.$valid, \\'has-error\\': userForm.passwordCheck.$invalid }\">\\n' +\n    '          <label for=\"passwordCheck\">Passwort wiederholen</label>\\n' +\n    '          <input ng-model=\"user.passwordCheck\" type=\"password\" class=\"form-control\" name=\"passwordCheck\" id=\"passwordCheck\" placeholder=\"Password\" required ng-minlength=\"3\">\\n' +\n    '          <span class=\"glyphicon form-control-feedback\" ng-class=\"{\\'glyphicon-ok\\': userForm.passwordCheck.$valid, \\'glyphicon-remove\\': userForm.passwordCheck.$invalid}\" aria-hidden=\"true\"></span>\\n' +\n    '          <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\\n' +\n    '        </div>\\n' +\n    '        <button type=\"submit\" class=\"btn btn-default\" ng-disabled=\"userForm.$invalid\">Speichern</button>\\n' +\n    '      </form>\\n' +\n    '    </section>\\n' +\n    '  </div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('session/views/session.tpl.html',\n    '<div class=\"container-fluid\">\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <header class=\"col-xs-12 col-sm-12\">\\n' +\n    '      <h2>Login</h2>\\n' +\n    '    </header>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <section class=\"col-xs-6 col-sm-6\">\\n' +\n    '\\n' +\n    '      <!-- user is currently logged out -->\\n' +\n    '      <div ng-hide=\"session.userLoggedIn\">\\n' +\n    '        <p>Bitte melde dich an.</p>\\n' +\n    '        <form name=\"sessionForm\" ng-submit=\"session.login()\">\\n' +\n    '          <div class=\"form-group has-feedback\" ng-class=\"{\\'has-success\\': sessionForm.name.$valid, \\'has-error\\': sessionForm.name.$invalid }\">\\n' +\n    '            <label for=\"name\">Name</label>\\n' +\n    '            <input ng-model=\"session.username\" type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Name\" required ng-pattern=\"/^[a-zA-Z0-9]{3,15}$/\">\\n' +\n    '            <span class=\"glyphicon form-control-feedback\" ng-class=\"{\\'glyphicon-ok\\': sessionForm.name.$valid, \\'glyphicon-remove\\': sessionForm.name.$invalid}\" aria-hidden=\"true\"></span>\\n' +\n    '            <span class=\"help-block\">Drei bis 15 alphanumerische Zeichen erforderlich.</span>\\n' +\n    '          </div>\\n' +\n    '          <div class=\"form-group has-feedback\" ng-class=\"{\\'has-success\\': sessionForm.password.$valid, \\'has-error\\': sessionForm.password.$invalid }\">\\n' +\n    '            <label for=\"password\">Passwort</label>\\n' +\n    '            <input ng-model=\"session.password\" type=\"password\" class=\"form-control has-error\" name=\"password\" id=\"password\" placeholder=\"Password\" required ng-minlength=\"3\">\\n' +\n    '            <span class=\"glyphicon form-control-feedback\" ng-class=\"{\\'glyphicon-ok\\': sessionForm.password.$valid, \\'glyphicon-remove\\': sessionForm.password.$invalid}\" aria-hidden=\"true\"></span>\\n' +\n    '            <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\\n' +\n    '          </div>\\n' +\n    '          <button type=\"submit\" class=\"btn btn-default\" ng-disabled=\"sessionForm.$invalid\">Login</button>\\n' +\n    '        </form>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '      <!-- user is currently logged in -->\\n' +\n    '      <div ng-show=\"session.userLoggedIn\">\\n' +\n    '        <p>Hallo {{session.currentSession.username}}!</p>\\n' +\n    '        <button ng-click=\"session.logout()\" class=\"btn btn-default\">Logout</button>\\n' +\n    '      </div>\\n' +\n    '    </section>\\n' +\n    '  </div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('lobby/views/lobby.tpl.html',\n    '<div class=\"container-fluid\">\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <header class=\"col-xs-12 col-md-12\">\\n' +\n    '      <h2>Lobby</h2>\\n' +\n    '      <p>Chatte und starte ein Spiel</p>\\n' +\n    '    </header>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <section class=\"col-xs-12 col-md-12\">\\n' +\n    '\\n' +\n    '      <!-- Static navbar -->\\n' +\n    '      <nav class=\"navbar navbar-default\">\\n' +\n    '        <div class=\"container-fluid\">\\n' +\n    '          <div class=\"navbar-header\">\\n' +\n    '            <a id=\"createGame\" class=\"navbar-brand\" href=\"#\" ng-click=\"lobby.toggleNewGame()\" stop-event><span\\n' +\n    '              class=\"glyphicon glyphicon-plus\"></span></a>\\n' +\n    '          </div>\\n' +\n    '          <div id=\"navbar\" class=\"navbar-collapse collapse\">\\n' +\n    '          </div>\\n' +\n    '        </div>\\n' +\n    '      </nav>\\n' +\n    '\\n' +\n    '    </section>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <section class=\"col-xs-12 col-md-8\">\\n' +\n    '\\n' +\n    '      <!--Panel Heading - Create New Game -->\\n' +\n    '      <div class=\"panel panel-default\" ng-hide=\"lobby.gameCreation\">\\n' +\n    '        <div class=\"panel-heading\">\\n' +\n    '          <span class=\"glyphicon glyphicon-file icon\"></span>\\n' +\n    '          Create New Game\\n' +\n    '        </div>\\n' +\n    '        <div class=\"panel-body\">\\n' +\n    '          <div class=\"form-group has-feedback\">\\n' +\n    '            <form name=\"createRoomForm\" novalidate> <!-- deactivate HTML5 validation-->\\n' +\n    '              <label for=\"creation-name\">Name:</label>\\n' +\n    '              <input type=\"text\" name=\"name\" class=\"form-control\" id=\"creation-name\" ng-minlength=\"3\"\\n' +\n    '                     ng-model=\"lobby.currentItem.name\" room>\\n' +\n    '\\n' +\n    '              <div class=\"validation-wrapper\">\\n' +\n    '                <div ng-show=\"createRoomForm.name.$error.minlength\" class=\"validation-errors\">The minimum length of the\\n' +\n    '                  number has to be at least 3 character long!\\n' +\n    '                </div>\\n' +\n    '                <div ng-show=\"createRoomForm.name.$error.room \" class=\"validation-errors\">Only alphanumeric characters\\n' +\n    '                  are accepted as input!\\n' +\n    '                </div>\\n' +\n    '                <span ng-hide=\"createRoomForm.name.$error.room || createRoomForm.name.$error.minlength\"\\n' +\n    '                      class=\"glyphicon glyphicon-ok form-control-feedback\" aria-hidden=\"true\"></span>\\n' +\n    '                <span ng-show=\"createRoomForm.name.$error.room || createRoomForm.name.$error.minlength\"\\n' +\n    '                      class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\\n' +\n    '              </div>\\n' +\n    '            </form>\\n' +\n    '          </div>\\n' +\n    '          <button type=\"submit\" class=\"btn btn-default\"\\n' +\n    '                  ng-click=\"createRoomForm.$valid && lobby.createRoom({name : lobby.currentItem.name})\">Create\\n' +\n    '          </button>\\n' +\n    '        </div>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '      <!--Panel Heading - Edit Existing Game -->\\n' +\n    '      <div class=\"panel panel-default\" ng-hide=\"lobby.gameEditing\">\\n' +\n    '        <div class=\"panel-heading\">\\n' +\n    '          <span class=\"glyphicon glyphicon-file icon\"></span>\\n' +\n    '          Edit Existing Game\\n' +\n    '        </div>\\n' +\n    '        <div class=\"panel-body\">\\n' +\n    '          <div class=\"form-group has-feedback\">\\n' +\n    '            <form name=\"editRoomForm\" novalidate> <!-- deactivate HTML5 validation-->\\n' +\n    '              <label for=\"editing-title\">Name:</label>\\n' +\n    '              <input type=\"text\" name=\"name\" class=\"form-control\" id=\"editing-title\" ng-minlength=\"3\"\\n' +\n    '                     ng-model=\"lobby.currentItem.name\" room>\\n' +\n    '              <input type=\"hidden\" name=\"roomId\" class=\"form-control\" ng-model=\"lobby.currentItem.roomId\">\\n' +\n    '\\n' +\n    '              <div class=\"validation-wrapper\">\\n' +\n    '                <div ng-show=\"editRoomForm.name.$error.minlength\" class=\"validation-errors\">The minimum length of the\\n' +\n    '                  number has to be at least 3 character long!\\n' +\n    '                </div>\\n' +\n    '                <div ng-show=\"editRoomForm.name.$error.room \" class=\"validation-errors\">Only alphanumeric characters are\\n' +\n    '                  accepted as input!\\n' +\n    '                </div>\\n' +\n    '                <span ng-hide=\"editRoomForm.name.$error.room || editRoomForm.name.$error.minlength\"\\n' +\n    '                      class=\"glyphicon glyphicon-ok form-control-feedback\" aria-hidden=\"true\"></span>\\n' +\n    '                <span ng-show=\"editRoomForm.name.$error.room || editRoomForm.name.$error.minlength\"\\n' +\n    '                      class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\\n' +\n    '              </div>\\n' +\n    '            </form>\\n' +\n    '          </div>\\n' +\n    '          <button type=\"submit\" class=\"btn btn-default\"\\n' +\n    '                  ng-click=\"editRoomForm.$valid && lobby.updateRoom({roomId : lobby.currentItem.roomId, name : lobby.currentItem.name})\">\\n' +\n    '            Edit\\n' +\n    '          </button>\\n' +\n    '        </div>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '      <!-- Show messages regarding actions to the user -->\\n' +\n    '      <action-message-display></action-message-display>\\n' +\n    '\\n' +\n    '      <!-- Display Games -->\\n' +\n    '      <div class=\"panel panel-default\">\\n' +\n    '        <div class=\"panel-heading\">\\n' +\n    '          <span class=\"glyphicon glyphicon-list-alt icon\"></span>\\n' +\n    '          Games\\n' +\n    '        </div>\\n' +\n    '        <div class=\"panel-body\">\\n' +\n    '          <table class=\"table note-table\">\\n' +\n    '            <thead class=\"game-table-header\">\\n' +\n    '            <tr>\\n' +\n    '              <th>\\n' +\n    '                RoomId\\n' +\n    '                <a href=\"#\" ng-click=\"lobby.reorderList(\\'roomId\\')\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '              <th>\\n' +\n    '                Name\\n' +\n    '                <a href=\"#\" ng-click=\"lobby.reorderList(\\'name\\')\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '              <th>\\n' +\n    '                Status\\n' +\n    '                <a href=\"#\" ng-click=\"lobby.reorderList(\\'status\\')\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '              <th>\\n' +\n    '                Players\\n' +\n    '                <a href=\"#\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '              <th>\\n' +\n    '                Creation\\n' +\n    '                <a href=\"#\" ng-click=\"lobby.reorderList(\\'creationTime\\')\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '              <th>\\n' +\n    '                Actions\\n' +\n    '                <a href=\"#\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\\n' +\n    '                </a>\\n' +\n    '              </th>\\n' +\n    '            </tr>\\n' +\n    '            </thead>\\n' +\n    '            <tbody class=\"note-table-body\">\\n' +\n    '            <tr class=\"noteTableRow\" ng-repeat=\"item in lobby.lobbyData | orderBy: lobby.orderBy : lobby.isDesc\">\\n' +\n    '              <td>{{item.roomId}}</td>\\n' +\n    '              <td>{{item.name}}</td>\\n' +\n    '              <td>{{item.status}}</td>\\n' +\n    '              <td>\\n' +\n    '                <span ng-repeat=\"player in item.players\">\\n' +\n    '                  {{player.userName}}\\n' +\n    '                </span>\\n' +\n    '              </td>\\n' +\n    '              <td>{{item.creationTime}}</td>\\n' +\n    '              <td>\\n' +\n    '                <a href=\"#\" class=\"icon\" ng-click=\"lobby.joinRoom(item)\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Join an existing game\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-plus\"></span>\\n' +\n    '                </a>\\n' +\n    '                <a href=\"#\" class=\"icon\" ng-click=\"lobby.editRoom(item)\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Edit your created room\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-pencil\"></span>\\n' +\n    '                </a>\\n' +\n    '                <a href=\"#\" class=\"icon\" ng-click=\"lobby.deleteRoom(item)\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete your created room\" stop-event>\\n' +\n    '                  <span class=\"glyphicon glyphicon-trash\"></span>\\n' +\n    '                </a>\\n' +\n    '              </td>\\n' +\n    '            </tr>\\n' +\n    '            </tbody>\\n' +\n    '          </table>\\n' +\n    '        </div>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '    </section>\\n' +\n    '    <aside class=\"col-xs-12 col-md-4\">\\n' +\n    '\\n' +\n    '      <!-- Import the chat controller -->\\n' +\n    '      <div ng-controller=\"ChatCtrl\">\\n' +\n    '        <chat-window chat-model=\"chatModel\" chat-section=\\'lobby\\'></chat-window>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '     </aside>\\n' +\n    '   </div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '\\n' +\n    '\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('lobby/views/action-message.html',\n    '<!-- Error -->\\n' +\n    '<div class=\"panel panel-default action-message\" ng-hide=\"lobby.actionMessage.isError === null || lobby.actionMessage.isError === false\">\\n' +\n    '    <span class=\"action-message-text \">\\n' +\n    '      {{lobby.actionMessage.data}}\\n' +\n    '      <!--{{lobby.actionMessage.status}}\\n' +\n    '      {{lobby.actionMessage.statusText}}-->\\n' +\n    '    </span>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '<!-- Success -->\\n' +\n    '<div class=\"panel panel-default action-message\" ng-hide=\"lobby.actionMessage.isError === null || lobby.actionMessage.isError === true\">\\n' +\n    '  <span class=\"action-message-text\">\\n' +\n    '    {{lobby.actionMessage.data}}\\n' +\n    '  </span>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('home/views/home.tpl.html',\n    '<div class=\"container-fluid\">\\n' +\n    '\\n' +\n    '  <header>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-12\">\\n' +\n    '        <h2>Willkommen beim Vier Gewinnt der Gruppe 6</h2>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '  </header>\\n' +\n    '\\n' +\n    '  <section>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-12\">\\n' +\n    '        <h3>Spiel starten</h3>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-10\">\\n' +\n    '        Klicke auf <a href=\"#/game\">Spiel</a>, um ein lokales Spiel zu zweit vor einem Bildschirm zu starten.\\n' +\n    '      </div>\\n' +\n    '      <div class=\"col-xs-12 col-sm-2\">\\n' +\n    '        <a class=\"btn btn-default btn-block\" href=\"#/game\" role=\"button\">Spiel</a>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '  </section>\\n' +\n    '\\n' +\n    '  <section>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-12\">\\n' +\n    '        <h3>Spielpartner finden</h3>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-10\">\\n' +\n    '        Klicke auf <a href=\"#/lobby\">Lobby</a>, um einen Spielpartner für ein Netzwerkspiel zu finden.\\n' +\n    '      </div>\\n' +\n    '      <div class=\"col-xs-12 col-sm-2\">\\n' +\n    '        <a class=\"btn btn-default btn-block\" href=\"#/lobby\" role=\"button\">Lobby</a>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '  </section>\\n' +\n    '\\n' +\n    '  <section>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-12\">\\n' +\n    '        <h3>Spielkonto nutzen</h3>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"row\">\\n' +\n    '      <div class=\"col-xs-12 col-sm-10\">\\n' +\n    '        Klicke auf <a href=\"#/session\">Login</a>, um dich an einem bereits bestehenden Spielkonto anzumelden oder um ein Spielkonto zu erstellen.<br>\\n' +\n    '        Klicke auf <a href=\"#/user\">Einstellungen</a>, um deine Angaben im Spielkonto anzuzeigen oder zu ändern.\\n' +\n    '      </div>\\n' +\n    '      <div class=\"col-xs-12 col-sm-2\">\\n' +\n    '        <a class=\"btn btn-default btn-block\" href=\"#/session\" role=\"button\">Login</a>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '  </section>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('game/views/game.tpl.html',\n    '<div class=\"container-fluid\">\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <header class=\"col-xs-12 col-sm-12\">\\n' +\n    '      <h2>Spiel</h2>\\n' +\n    '      <p>Auf Spalte klicken um Stein zu legen</p>\\n' +\n    '    </header>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '    <section class=\"col-xs-12 col-sm-6\">\\n' +\n    '      <game-move></game-move>\\n' +\n    '    </section>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"row\">\\n' +\n    '\\n' +\n    '    <section class=\"col-xs-12 col-sm-6\">\\n' +\n    '\\n' +\n    '      <div class=\"game-container\" ng-click=\"game.doMove($event)\" ng-mouseover=\"game.mouseOver($event)\">\\n' +\n    '          <div class=\"game-row\" ng-repeat=\"gameFieldRow in game.getCurrentGame().cells track by $index\">\\n' +\n    '            <game-field ng-repeat=\"gameField in gameFieldRow track by $index\"></game-field>\\n' +\n    '          </div>\\n' +\n    '      </div>\\n' +\n    '\\n' +\n    '      <div class=\"btn-group btn-group-justified game-control\" role=\"group\" aria-label=\"...\">\\n' +\n    '        <div class=\"btn-group\" role=\"group\">\\n' +\n    '          <button type=\"button\" class=\"btn btn-default\" ng-click=\"game.restartGame()\">\\n' +\n    '            <span class=\"glyphicon glyphicon-repeat\" aria-hidden=\"true\"></span> Neues Spiel\\n' +\n    '          </button>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"btn-group\" role=\"group\">\\n' +\n    '          <button type=\"button\" class=\"btn btn-default\" ng-click=\"game.breakGame()\">\\n' +\n    '            <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> Spiel beenden\\n' +\n    '          </button>\\n' +\n    '        </div>\\n' +\n    '      </div>\\n' +\n    '    </section>\\n' +\n    '\\n' +\n    '    <aside class=\"col-xs-12 col-sm-6\">\\n' +\n    '      <!-- Chat Module -->\\n' +\n    '      <div ng-controller=\"ChatCtrl\">\\n' +\n    '        <chat-window chat-model=\"chatModel\" chat-section=\\'game\\' id=\"(game.getCurrentGame())._id\"></chat-window>\\n' +\n    '      </div>\\n' +\n    '    </aside>\\n' +\n    '\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('game/directives/game-move-directive.tpl.html',\n    '<div class=\"game-move\">\\n' +\n    '\\n' +\n    '  <div class=\"move-play\" ng-click=\"game.doMove($event)\" ng-mouseover=\"game.mouseOver($event)\" tabindex=\"0\" ng-keydown=\"game.keyDown($event)\" >\\n' +\n    '    <div class=\"game-row\">\\n' +\n    '      <game-field ng-repeat=\"gameField in game.getMoveFields() track by $index\"></game-field>\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"move-info\" ng-class=\"game.getGameState().state\">\\n' +\n    '    <div class=\"message-cell\">\\n' +\n    '      <span class=\"message-text\">{{game.getGameState().message}}</span>\\n' +\n    '    </div>\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('game/directives/game-field-directive.tpl.html',\n    '<div class=\"game-box\">\\n' +\n    '  <div class=\"game-field\" ng-class=\"{\\'red\\':gameField==1, \\'yellow\\':gameField==2}\" data-x=\"{{$index}}\" data-y=\"{{$parent.$index}}\"></div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('common/directives/main-menu-directive.tpl.html',\n    '<nav class=\\'navbar navbar-inverse\\' role=\\'navigation\\' data-bs-navbar data-bs-collapse data-start-collapsed=\\'true\\'>\\n' +\n    '  <div class=\\'container\\'>\\n' +\n    '\\n' +\n    '    <div class=\\'navbar-header\\'>\\n' +\n    '      <button class=\\'navbar-toggle collapsed\\' type=\\'button\\' data-bs-collapse-toggle>\\n' +\n    '        <span class=\\'sr-only\\'>Toggle Navigation</span>\\n' +\n    '        <span class=\\'icon-bar\\'></span>\\n' +\n    '        <span class=\\'icon-bar\\'></span>\\n' +\n    '        <span class=\\'icon-bar\\'></span>\\n' +\n    '      </button>\\n' +\n    '      <a class=\\'navbar-brand\\' href=\\'#/\\'>VierGewinnt6</a>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '    <div class=\\'navbar-collapse collapse\\' data-bs-collapse-target>\\n' +\n    '      <ul class=\\'nav navbar-nav\\'>\\n' +\n    '        <li data-match-route=\\'/home\\'>\\n' +\n    '          <a href=\\'#/home\\'>Home</a>\\n' +\n    '        </li>\\n' +\n    '        <li data-match-route=\\'/lobby\\'>\\n' +\n    '          <a href=\\'#/lobby\\'>Lobby</a>\\n' +\n    '        </li>\\n' +\n    '        <li data-match-route=\\'/game\\'>\\n' +\n    '          <a href=\\'#/game\\'>Spiel</a>\\n' +\n    '        </li>\\n' +\n    '        <li data-match-route=\\'/user\\' ng-show=\\'mainMenu.isUserLoggedIn()\\'>\\n' +\n    '          <a href=\\'#/user\\'>Einstellungen</a>\\n' +\n    '        </li>\\n' +\n    '        <li data-match-route=\\'/session\\'>\\n' +\n    '          <a href=\\'#/session\\'>\\n' +\n    '            <span ng-hide=\\'mainMenu.isUserLoggedIn()\\'>Login</span>\\n' +\n    '            <span ng-show=\\'mainMenu.isUserLoggedIn()\\'>Logout</span>\\n' +\n    '          </a>\\n' +\n    '        </li>\\n' +\n    '      </ul>\\n' +\n    '\\n' +\n    '      <ul class=\"nav navbar-nav navbar-right\">\\n' +\n    '        <p class=\"navbar-text\">{{mainMenu.getCurrentUsername()}}</p>\\n' +\n    '      </ul>\\n' +\n    '    </div>\\n' +\n    '\\n' +\n    '  </div>\\n' +\n    '</nav>\\n' +\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('chat/views/chat.tpl.html',\n    '');\n}]);\n\nangular.module('vierGewinnt6').run(['$templateCache', function($templateCache) {\n  $templateCache.put('chat/views/chat-window-template.html',\n    '<!-- Chat window-->\\n' +\n    '<div class=\"panel panel-default\">\\n' +\n    '  <div class=\"panel-heading\">\\n' +\n    '    <span class=\"glyphicon glyphicon-list-alt icon\"></span>\\n' +\n    '    Chat\\n' +\n    '  </div>\\n' +\n    '\\n' +\n    '  <div class=\"panel-body\">\\n' +\n    '    <label>Nachrichten</label>\\n' +\n    '    <div class=\"chat-output\">\\n' +\n    '      <div id=\"chatHistoryPlaceholder\">\\n' +\n    '        <i>Es sind momentan keine Nachrichten vorhanden!</i>\\n' +\n    '      </div>\\n' +\n    '    </div>\\n' +\n    '    <br>\\n' +\n    '    <div class=\"form-group has-feedback\">\\n' +\n    '      <form action=\"\">\\n' +\n    '        <label>Neue Nachrichten</label>\\n' +\n    '        <input id=\"msgInput\" ng-keypress=\"inputBoxKeypress($event)\" autocomplete=\"off\" ng-model=\"currentMessage.message\" class=\"form-control\"/>\\n' +\n    '      </form>\\n' +\n    '    </div>\\n' +\n    '    <button ng-click=\"sendMessage(currentMessage)\" type=\\'button\\' stop-event class=\"btn btn-default\">Senden</button>\\n' +\n    '  </div>\\n' +\n    '</div>\\n' +\n    '');\n}]);\n","///<reference path='../../../typings/tsd.d.ts' />\r\nmodule Common.Services {\r\n  'use strict';\r\n\r\n  export interface ILoggerService {\r\n    /**\r\n     * Displays error message to user and logs message as error.\r\n     * @param message\r\n     * @param details\r\n     */\r\n    error(message: string, ...details: any[]): void;\r\n\r\n    /**\r\n     * Displays warn message to user and logs message as warning.\r\n     * @param message\r\n     * @param details\r\n     */\r\n    warn(message: string, ...details: any[]): void;\r\n\r\n    /**\r\n     * Displays info message to user and logs message as info.\r\n     * @param message\r\n     * @param details\r\n     */\r\n    info(message: string, ...details: any[]): void;\r\n\r\n    /**\r\n     * Logs message as debug.\r\n     * @param message\r\n     * @param details\r\n     */\r\n    debug(message: string, ...details: any[]): void;\r\n  }\r\n\r\n  class LoggerService implements ILoggerService {\r\n\r\n    public static $inject = [ '$log' ];\r\n\r\n    constructor(private $log: ng.ILogService) {\r\n      toastr.options.timeOut = 3000;\r\n      toastr.options.showDuration = 1200;\r\n      toastr.options.hideDuration = 500;\r\n      toastr.options.positionClass = \"toast-top-right\";\r\n      toastr.options.closeButton = true;\r\n    }\r\n\r\n    error(message: string, ...details: any[]): void {\r\n      toastr.error(message);\r\n      this.log(\"ERROR\", message, details);\r\n    }\r\n\r\n    warn(message: string, ...details: any[]): void {\r\n      toastr.warning(message);\r\n      this.log(\"WARN \", message, details);\r\n    }\r\n\r\n    info(message: string, ...details: any[]): void {\r\n      toastr.info(message);\r\n      this.log(\"INFO \", message, details);\r\n    }\r\n\r\n    debug(message: string, ...details: any[]): void {\r\n      this.log(\"DEBUG\", message, details);\r\n    }\r\n\r\n    private log(level: string, message: string, ...details: any[]): void {\r\n      this.$log.log(new Date().toISOString() + \" \" + level + \" \" + message + \" \" + details.join(' '));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ngdoc service\r\n   * @name common.service:LoggerService\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('common')\r\n    .service('LoggerService', LoggerService);\r\n}\r\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Common.Services {\n  'use strict';\n\n  export interface IConfigService {\n    getServiceUrl(path: string): string;\n    getWebsocketUrl(): string;\n  }\n\n  class ConfigService implements IConfigService {\n\n    public static $inject = [\n      'appConfig', '$location'\n    ];\n\n    constructor(private appConfig: vierGewinnt6.IAppConfig, private $location: ng.ILocationService) {\n    }\n\n    getServiceUrl(path: string): string {\n      var baseUrl = this.appConfig.baseUrlPattern.replace('{host}', this.$location.host());\n      return baseUrl + path;\n    }\n\n    getWebsocketUrl(): string {\n      return this.appConfig.baseWsUrlPattern.replace('{host}', this.$location.host());\n    }\n  }\n\n  /**\n   * @ngdoc service\n   * @name game.service:Game\n   *\n   * @description\n   *\n   */\n  angular\n    .module('common')\n    .service('ConfigService', ConfigService);\n}\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Common.Directives {\n  'use strict';\n\n  angular\n    .module('common')\n    .directive('mainMenu', mainMenu);\n\n  function mainMenu(): ng.IDirective {\n    return {\n      restrict: 'E',\n      controller: MainMenuCtrl,\n      controllerAs: 'mainMenu',\n      replace: true,\n      templateUrl: 'common/directives/main-menu-directive.tpl.html',\n      bindToController: true\n    };\n  }\n\n  export class MainMenuCtrl {\n\n    // $inject annotation.\n    // It provides $injector with information about dependencies to be injected into constructor\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\n    // See http://docs.angularjs.org/guide/di\n    public static $inject = [\n      'SessionService'\n    ];\n\n    // dependencies are injected via AngularJS $injector\n    constructor(private sessionService:Session.Services.ISessionService) {\n    }\n\n    isUserLoggedIn(): boolean {\n      return this.sessionService.isLoggedIn();\n    }\n\n    getCurrentUsername(): string {\n      var session = this.sessionService.getCurrentSession();\n      return session ? session.username : null;\n    }\n  }\n}\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule chat {\r\n  'use strict';\r\n\r\n  /* @ngdoc object\r\n  * @name chat\r\n  * @description\r\n  *\r\n  */\r\n  angular\r\n    .module('chat', [\r\n      //'ngRoute'\r\n    ]);\r\n}\r\n","module chat.directives {\r\n  \"use strict\";\r\n  export class ChatWindow implements ng.IDirective {\r\n    public restrict = 'E'\r\n    public static DirectoryName = \"chatWindow\";\r\n    public scope = {\r\n      chatModel: '=',\r\n      chatSection: '@chatSection',\r\n      id: '='\r\n    }\r\n\r\n    public templateUrl = \"chat/views/chat-window-template.html\";\r\n    public currentMessage : chat.controllers.IChatMessage;\r\n\r\n    public link(scope:chat.controllers.IChatScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes) {\r\n\r\n      scope.sendMessage = function(message : chat.controllers.IChatMessage){\r\n        scope.chatModel.sendMessage(message);\r\n        this.currentMessage = \"\";\r\n      };\r\n\r\n      scope.inputBoxKeypress = function(e){\r\n        if( e.which === 13) // Enter\r\n        {\r\n          var chatMsg = {\r\n            message : $('#msgInput').val()\r\n          };\r\n\r\n          $('#msgInput').val('');\r\n          scope.chatModel.sendMessage(chatMsg);\r\n        }\r\n      };\r\n\r\n      // For directive implementations which don't use an attribute of id\r\n      scope.id = angular.isUndefined(scope.id) ? \"\" : scope.id;\r\n\r\n      // Store the section in the controller\r\n      scope.chatModel.storeChatSectionDataInCtrl(scope.chatSection, scope.id);\r\n\r\n      // Subscribe the chat for the particular section\r\n      scope.chatModel.subscribeToChatSectionEvents(scope.chatSection);\r\n\r\n      // Retrieve the chat history\r\n      scope.chatModel.fetchChatHistory(scope.chatSection, scope.id);\r\n\r\n      // Gets triggered as soon as the directive gets destroyed\r\n      scope.$on('$destroy', function() {\r\n        // Subscribe the chat for the particular section\r\n        scope.chatModel.unsubscribeToChatSectionEvents(scope.chatSection, scope.id);\r\n      });\r\n\r\n      scope.$watchCollection(\r\n        function(){\r\n          return scope.chatModel.chatHistory\r\n        },\r\n        function(newChatHistory :  Array<chat.controllers.IChatMessage>, oldChatHistory :  Array<chat.controllers.IChatMessage>){\r\n          // Delete existing records\r\n          var chatWindowDiv : JQuery = $('.chat-output');\r\n\r\n          if(newChatHistory !== oldChatHistory){\r\n            // Load the whole chat history\r\n            if(oldChatHistory.length === 0){\r\n              chatWindowDiv.empty();\r\n\r\n              for (var i = 0; i < newChatHistory.length; ++i) {\r\n                chatWindowDiv.append($('<span><strong>[' +  newChatHistory[i].creationDate + '&nbsp' + newChatHistory[i].from + ']</strong>&nbsp' +  newChatHistory[i].message + '<br></span>'));\r\n              }\r\n            } else { // Just add a single message to the chat history\r\n              var index = newChatHistory.length - 1;\r\n              chatWindowDiv.append($('<span><strong>[' +  newChatHistory[index].creationDate + '&nbsp' + newChatHistory[index].from + ']</strong>&nbsp' +  newChatHistory[index].message + '<br></span>'));\r\n            }\r\n          }\r\n        })\r\n    }\r\n\r\n    public static factory():ng.IDirectiveFactory {\r\n      var directive = () => new ChatWindow();\r\n      directive.$inject = [];\r\n      return directive;\r\n    }\r\n  }\r\n\r\n  angular\r\n    .module('chat')\r\n    .directive(chat.directives.ChatWindow.DirectoryName, chat.directives.ChatWindow.factory());\r\n}\r\n\r\ninterface IChatWindowAtributes extends ng.IAttributes {\r\n  chatSection : string;\r\n}\r\n\r\n\r\n","///<reference path='../../../typings/tsd.d.ts' />\r\nmodule chat.controllers {\r\n  'use strict';\r\n\r\n  class ChatCtrl {\r\n\r\n    public chatHistory : Array<IChatMessage> = [];\r\n    public chatSection : string;\r\n    public id : string; // Unique Identifier for a sub section in \"chatSection\" => e.g one chat for each pending game\r\n\r\n    // $inject annotation.\r\n    // It provides $injector with information about dependencies to be injected into constructor\r\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\r\n    // See http://docs.angularjs.org/guide/di\r\n    public static $inject = [\r\n      '$scope',\r\n      'UserService',\r\n      'MessageService'\r\n    ];\r\n\r\n    // dependencies are injected via AngularJS $injector\r\n    constructor(private $scope: IChatScope, private userService : User.Services.IUserService, private messageService : Common.Services.IMessageService) {\r\n      this.initChatModel();\r\n    }\r\n\r\n    public initChatModel() : void{\r\n      this.$scope.chatModel = {\r\n        chatHistory: this.chatHistory,\r\n        userService: this.userService,\r\n        messageService: this.messageService,\r\n        storeChatSectionDataInCtrl: this.storeChatSectionDataInCtrl,\r\n        subscribeToChatSectionEvents: this.subscribeToChatSectionEvents,\r\n        unsubscribeToChatSectionEvents: this.unsubscribeToChatSectionEvents,\r\n        fetchChatHistory: this.fetchChatHistory,\r\n        sendMessage: this.sendMessage,\r\n        chatMessageListener: this.chatMessageListener\r\n      }\r\n    }\r\n\r\n    public storeChatSectionDataInCtrl(section, id){\r\n      // Store the section additionally to the directive in the controller\r\n      this.chatSection = section;\r\n      this.id = id;\r\n    }\r\n\r\n    public subscribeToChatSectionEvents(section : string){\r\n      var self = this;\r\n\r\n      // Subscribe for the chat section for incoming messages\r\n      this.messageService.addMessageListener(section + \"ChatMessage\", this.chatMessageListener(self));\r\n\r\n      // Subscribe for incoming messages to load the chat history\r\n      this.messageService.addMessageListener(section + \"ChatHistory\", function(message : ChatHistoryMessage){\r\n        if(message.data.chatHistory.length > 0){\r\n          $('#chatHistoryPlaceholder').hide();\r\n          self.chatHistory = message.data.chatHistory;\r\n        } else{\r\n          $('#chatHistoryPlaceholder').show();\r\n        }\r\n      });\r\n    }\r\n\r\n    public chatMessageListener(self){\r\n      return function(message : ChatInputMessage){\r\n        self.chatHistory.push(message.data.chatMessageObj);\r\n      }\r\n    }\r\n\r\n    public unsubscribeToChatSectionEvents(section : string, id : string){\r\n      // Unsubscribe to the client side message service\r\n      this.messageService.removeMessageListenerType(section + \"ChatMessage\");\r\n      this.messageService.removeMessageListenerType(section + \"ChatHistory\");\r\n\r\n      // Unsubscribe to the server side chat service\r\n      var messageObj = new UnsubscribeToChatSectionMessage({\r\n        chatSectionPrefix : section,\r\n        id : id\r\n      });\r\n      this.messageService.sendMessage(messageObj);\r\n    }\r\n\r\n    // Send a chat message to the server\r\n    public sendMessage(message : IChatMessage){\r\n      var messageObj = new ChatInputMessage({\r\n        chatSectionPrefix : this.chatSection,\r\n        chatMessageObj : message,\r\n        id : this.id\r\n      });\r\n\r\n      this.messageService.sendMessage(messageObj);\r\n    }\r\n\r\n    // Send a request for the chat history to the server\r\n    public fetchChatHistory(section : string, id : string){\r\n      var messageObj : ChatHistoryMessage = new ChatHistoryMessage({\r\n        chatSectionPrefix : section,\r\n        id : id,\r\n        chatHistory : null\r\n       });\r\n\r\n       // Send a request in order to retrieve the chat history of the given section\r\n       this.messageService.sendMessage(messageObj);\r\n    }\r\n  }\r\n\r\n  export interface IChatScope extends ng.IScope {\r\n    getTemplateUrl : () => string;\r\n    chatModel : IChatModel;\r\n    chatSection : string;\r\n    id : string;\r\n    sendMessage : (message : IChatMessage) => void;\r\n    inputBoxKeypress : (event : any, message : ChatInputMessage) => void;\r\n  }\r\n\r\n  export interface IChatModel {\r\n    chatHistory :  Array<IChatMessage>;\r\n    userService: User.Services.IUserService;\r\n    messageService : Common.Services.IMessageService;\r\n    storeChatSectionDataInCtrl : (section : string, id : string) => void;\r\n    subscribeToChatSectionEvents: (nameOfEventListener : string) => void;\r\n    unsubscribeToChatSectionEvents: (nameOfEventListener : string, id : string) => void;\r\n    fetchChatHistory : (section : string, id : string) => void;\r\n    sendMessage : (message : IChatMessage) => void;\r\n    chatMessageListener : (message : ChatInputMessage) => void;\r\n  }\r\n\r\n  // Message\r\n  export interface IChatMessage {\r\n    message : string;\r\n    creationDate? : string;\r\n    from? : string;\r\n    to? : string;\r\n  }\r\n\r\n  export class ChatMessage implements IChatMessage {\r\n    public message : string;\r\n    public creationDate : string;\r\n    public from : string;\r\n    public to : string;\r\n\r\n    constructor(message : IChatMessage){\r\n      this.message = message.message;\r\n      this.creationDate = message.creationDate;\r\n      this.from = message.from;\r\n      this.to = message.to;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Message between services and server and clients.\r\n   */\r\n  export interface IMessage {\r\n\r\n    /**\r\n     * Type of the message.\r\n     */\r\n      type: string;\r\n\r\n    /**\r\n    * Further granularity for a given \"type\"\r\n    */\r\n      id? : string;\r\n\r\n    /**\r\n     * The message content.\r\n     */\r\n    data: any;\r\n  }\r\n\r\n  export class ClientMessage<T> implements IMessage {\r\n\r\n    type:string;\r\n    id: string;\r\n    data:T;\r\n\r\n    constructor(type:string, data:T, id? : string) {\r\n      this.type = type;\r\n      this.data = data;\r\n      this.id = id;\r\n    }\r\n  }\r\n\r\n\r\n  // Unsubscribe to a chat section\r\n  export interface IChatUnsubscribe{\r\n    chatSectionPrefix : string;\r\n    id : string;\r\n  }\r\n\r\n  export class UnsubscribeToChatSectionMessage extends ClientMessage<IChatData> {\r\n    static NAME = \"ChatUnsubscribe\";\r\n\r\n    constructor (data: IChatUnsubscribe) {\r\n      super(data.chatSectionPrefix + data.id + UnsubscribeToChatSectionMessage.NAME, data, data.id);\r\n    }\r\n  }\r\n\r\n  // Send Messages\r\n  export interface IChatData{\r\n    chatSectionPrefix : string;\r\n    id? : string;\r\n    chatMessageObj : IChatMessage;\r\n  }\r\n\r\n  export class ChatInputMessage extends ClientMessage<IChatData> {\r\n    static NAME = \"ChatMessage\";\r\n\r\n    constructor (chatData: IChatData) {\r\n      super(chatData.chatSectionPrefix + ChatInputMessage.NAME, chatData, chatData.id);\r\n    }\r\n  }\r\n\r\n  // Chat history\r\n  export interface IChatHistory{\r\n    chatSectionPrefix : string;\r\n    id? : string;\r\n    chatHistory : Array<IChatMessage>;\r\n  }\r\n\r\n  export class ChatHistoryMessage extends ClientMessage<IChatHistory> {\r\n    static NAME = \"ChatHistory\";\r\n\r\n    constructor (chatData: IChatHistory) {\r\n      super(chatData.chatSectionPrefix + ChatHistoryMessage.NAME, chatData, chatData.id);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * @ngdoc object\r\n  * @name chat.controller:ChatCtrl\r\n  *\r\n  * @description\r\n  *\r\n  */\r\n  angular\r\n    .module('chat')\r\n    .controller('ChatCtrl', ChatCtrl);\r\n}\r\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule home {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('user')\r\n    .config(config)\r\n\r\n  function config($routeProvider: ng.route.IRouteProvider) {\r\n    $routeProvider\r\n      .when('/user', {\r\n        templateUrl: 'user/views/user.tpl.html',\r\n        controller: 'UserCtrl',\r\n        controllerAs: 'user',\r\n        resolve: {\r\n          'Something': ['UserService', function (userService: User.Services.IUserService) {\r\n            return userService.loadUserData();\r\n          }]\r\n        }\r\n      });\r\n  }\r\n}\r\n","///<reference path='../../typings/tsd.d.ts' />\nmodule session {\n  'use strict';\n\n  angular\n    .module('session')\n    .config(config)\n\n  function config($routeProvider: ng.route.IRouteProvider) {\n    $routeProvider\n      .when('/session', {\n        templateUrl: 'session/views/session.tpl.html',\n        controller: 'SessionCtrl',\n        controllerAs: 'session',\n        resolve: {\n          'Something': ['SessionService', function (sessionService: Session.Services.ISessionService) {\n            return sessionService.loadCurrentSession();\n          }]\n        }\n      });\n  }\n}\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule lobby {\r\n  'use strict';\r\n\r\n  /* @ngdoc object\r\n   * @name lobby\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('lobby', [\r\n      'ngRoute',\r\n      'ngResource',\r\n      'ngAnimate'\r\n    ])\r\n}\r\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule lobby {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('lobby')\r\n    .config(config)\r\n\r\n  function config($routeProvider: ng.route.IRouteProvider) {\r\n    $routeProvider\r\n      .when('/lobby', {\r\n        templateUrl: 'lobby/views/lobby.tpl.html',\r\n        controller: 'LobbyCtrl',\r\n        controllerAs: 'lobby',\r\n        resolve: {\r\n          'LoadUserData': ['UserService', function (userService: User.Services.IUserService) {\r\n            return userService.loadUserData();\r\n          }]\r\n        }\r\n      });\r\n  }\r\n}\r\n","///<reference path='../../../typings/tsd.d.ts' />\nmodule Game.Services {\n  'use strict';\n\n  export interface IGameService {\n    getGame(): IGame;\n    getGameId(): string;\n    newGame(): ng.IPromise<IGame>;\n    loadGame(gameId: string): ng.IPromise<IGame>;\n    doMove(col: number): ng.IPromise<IGame>;\n    restartGame(): ng.IPromise<IGame>;\n    breakGame(): ng.IPromise<IGame>;\n  }\n\n  export interface IGame {\n    cells: Color[][];\n    nextColor: Color;\n    nextPlayerId: string;\n    playerId1: string;\n    playerId2: string;\n    state: GameState;\n    _id: string;\n  }\n\n  export enum Color {\n    Empty = 0,\n    Red = 1,\n    Yellow = 2\n  }\n\n  export enum GameState {\n    New = 0,\n    Running = 1,\n    Finished = 2,\n    Broken = 3\n  }\n\n  interface IGameResource extends ng.resource.IResourceClass<ng.resource.IResource<IGame>> {\n    create(): ng.resource.IResource<IGame>;\n    move(col: any, IGame): ng.resource.IResource<IGame>;\n    restart(IGame): ng.resource.IResource<IGame>;\n    break(IGame): ng.resource.IResource<IGame>;\n  }\n\n  class GameService implements IGameService {\n\n    private game: IGame;\n    private gameId: string;\n\n    private gameResource: IGameResource;\n\n    public static $inject = [\n      '$resource', '$q', 'LoggerService', 'MessageService', 'ConfigService'\n    ];\n\n    constructor(private $resource: angular.resource.IResourceService, private $q: ng.IQService, private log: Common.Services.ILoggerService, private messageService: Common.Services.IMessageService, private configService: Common.Services.IConfigService) {\n      var that = this;\n      var gameUrl = this.configService.getServiceUrl('/game/:gameId');\n\n      that.gameResource = <IGameResource>$resource(gameUrl,\n        { gameId: '@_id' }, {\n          create: { method: 'POST' },\n          move: { method: 'POST', url: gameUrl + '/move' },\n          restart: { method: 'POST', url: gameUrl + '/restart' },\n          break: { method: 'POST', url: gameUrl + '/break' }\n        });\n\n      // register for game update messages concerns to current game\n      messageService.addMessageListener(GameUpdateMessage.NAME, function (message: GameUpdateMessage) {\n        if (that.gameId === message.data._id) {\n          that.log.debug('message reveiced ' + message);\n          that.setGame(message.data);\n        }\n      });\n    }\n\n    getGame(): IGame {\n      return this.game;\n    }\n\n    getGameId(): string {\n      return this.gameId;\n    }\n\n    newGame(): ng.IPromise<IGame> {\n      var deferred = this.$q.defer();\n\n      if (!this.game) {\n        this.gameResource.create().$promise\n          .then(data => {\n            this.setGame(data);\n            deferred.resolve(this.game);\n          })\n        .catch(err => {\n            this.log.debug('new game failed', err);\n            deferred.reject(err);\n          });\n      } else {\n        deferred.resolve(this.game);\n      }\n\n      return deferred.promise;\n    }\n\n    loadGame(gameId: string): ng.IPromise<IGame> {\n      var deferred = this.$q.defer();\n\n      // load game if game id changed only\n      if (this.gameId !== gameId) {\n        this.gameResource.get({gameId:gameId}).$promise\n          .then(data => {\n            this.setGame(data);\n            deferred.resolve(this.game);\n          })\n          .catch(err => {\n            this.log.debug('load game failed', err);\n            deferred.reject(err);\n          });\n      } else {\n        deferred.resolve(this.game);\n      }\n\n      this.gameId = gameId;\n      return deferred.promise;\n    }\n\n    doMove(col: number): ng.IPromise<IGame> {\n      var deferred = this.$q.defer();\n\n      this.gameResource.move({col:col}, this.game).$promise\n        .then(data => {\n          this.setGame(data);\n          deferred.resolve(this.game);\n        })\n        .catch(err => {\n          this.log.debug('do move failed', err);\n          deferred.reject(err);\n        });\n\n      return deferred.promise;\n    }\n\n    restartGame(): ng.IPromise<IGame> {\n      var deferred = this.$q.defer();\n\n      this.gameResource.restart(this.game).$promise\n        .then(data => {\n          this.setGame(data);\n          deferred.resolve(this.game);\n        })\n        .catch(err => {\n          this.log.debug('restart game failed', err);\n          deferred.reject(err);\n        });\n\n      return deferred.promise;\n    }\n\n    breakGame(): ng.IPromise<IGame> {\n      var deferred = this.$q.defer();\n\n      this.gameResource.break(this.game).$promise\n        .then(data => {\n          this.setGame(data);\n          deferred.resolve(this.game);\n        })\n        .catch(err => {\n          this.log.debug('break game failed', err);\n          deferred.reject(err);\n        });\n\n      return deferred.promise;\n    }\n\n    private setGame(game: IGame) {\n      this.game = game;\n      this.gameId = game._id;\n    }\n  }\n\n  class GameUpdateMessage implements Common.Services.IMessage {\n    static NAME = \"GameUpdateMessage\";\n    type: string = GameUpdateMessage.NAME;\n    data: IGame;\n  }\n\n  /**\n   * @ngdoc service\n   * @name game.service:Game\n   *\n   * @description\n   *\n   */\n  angular\n    .module('game')\n    .service('GameService', GameService);\n}\n","/// <reference path='../_lobby.ts' />\n\n\nmodule lobby.services {\n  \"use strict\";\n  export class LobbyStorage {\n\n    public static $inject = [\n      '$http',\n      '$resource',\n      'ConfigService',\n      'MessageService',\n      '$location'\n    ];\n\n    constructor(private $http: ng.IHttpService, private $resource : ng.resource.IResourceService, private configService: Common.Services.IConfigService, private messageService: Common.Services.IMessageService,\n                private $location: ng.ILocationService) {\n\n      // register for game update messages concerns to current game\n      messageService.addMessageListener(RoomUpdateMessage.NAME, function (message: RoomUpdateMessage) {\n        $location.path('/game/' + message.data.gameId);\n      });\n    }\n\n    public LobbyRoom() : ng.resource.IResourceClass<ng.resource.IResource<any>> {\n      return this.$resource(this.configService.getServiceUrl('/lobby/:id'), {id: '@id' });\n    }\n\n\n  }\n\n  class RoomUpdateMessage implements Common.Services.IMessage {\n    static NAME = \"RoomUpdateMessage\";\n    type: string = RoomUpdateMessage.NAME;\n    data: lobby.interfaces.Room;\n  }\n}\n\nangular\n  .module('lobby')\n  .service('lobbyStorage', lobby.services.LobbyStorage)\n","/// <reference path='../_lobby.ts' />\r\nmodule lobby.models {\r\n  \"use strict\";\r\n   export class Room {\r\n      roomId: string;title: string;\r\n      status: string;\r\n      creationDate: string;\r\n      players: Array<string>;\r\n    }\r\n  }\r\n","/**\r\n * Created by Alexander on 04.08.2015.\r\n */\r\n\r\nmodule lobby.interfaces{\r\n  \"use strict\";\r\n\r\n  export interface IRoomRessource extends ng.resource.IResource<IRoomRessource> {\r\n    roomId?: string;\r\n    name?: string;\r\n    status?: string;\r\n    creationTime?: string;\r\n    players?: Array<IPlayer>;\r\n    isDelete? : boolean;\r\n    isJoin? : boolean;\r\n    gameId?: string;\r\n  }\r\n\r\n  export interface IPlayer {\r\n    userName : string;\r\n    playerId : string;\r\n  }\r\n\r\n  export class Room {\r\n    public roomId : string;\r\n    public name: string;\r\n    public status: string;\r\n    public creationTime: string;\r\n    public players: Array<IPlayer>;\r\n    public isDelete : boolean;\r\n    public isJoin : boolean;\r\n    public gameId: string;\r\n\r\n      constructor(room : IRoomRessource){\r\n        if(room !== null){\r\n          this.roomId = room.roomId;\r\n          this.name= room.name;\r\n          this.status= room.status;\r\n          this.creationTime= room.creationTime;\r\n          this.players= room.players;\r\n          this.isDelete= room.isDelete;\r\n          this.isJoin= room.isJoin;\r\n          this.gameId = room.gameId;\r\n        }\r\n      }\r\n  }\r\n}\r\n","module lobby.directives {\n  \"use strict\";\n  export class StopEvent implements ng.IDirective {\n    public restrict = 'A';\n    public static DirectoryName = \"stopEvent\";\n\n    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes) => {\n      element.bind('click', function (e) {\n        e.stopPropagation();\n      });\n    }\n\n    public static factory():ng.IDirectiveFactory {\n      var directive = () => new StopEvent();\n      return directive;\n    }\n  }\n\n  export class RoomValidator implements ng.IDirective {\n    public restrict = 'A';\n    public require = 'ngModel';\n    public static DirectoryName = \"room\";\n\n    public link = (scope:ng.IScope, element:ng.IAugmentedJQuery, attrs:ng.IAttributes, ctrl:any) => {\n      ctrl.$validators.room = function (modelValue, viewValue) {\n        var ROOM_REGEXP = /^\\w+$/;\n\n        if (ROOM_REGEXP.test(viewValue)) {\n          return true;\n        }\n\n        return false;\n      };\n    }\n\n\n    public static factory():ng.IDirectiveFactory {\n      var directive = () => new RoomValidator();\n      return directive;\n    }\n  }\n\n  export class ActionMessageDisplay implements ng.IDirective {\n    public restrict = 'E';\n    public static DirectoryName = \"actionMessageDisplay\";\n    public transclude = true;\n    public templateUrl = \"lobby/views/action-message.html\";\n    private $timeout;\n\n    constructor($timeout) {\n      this.$timeout = $timeout;\n    }\n\n    public link = ($scope:lobby.controllers.ILobby, element:ng.IAugmentedJQuery, attrs:ng.IAttributes, ctrl:any) => {\n      $scope.$watch(() => {\n        return $scope.lobby.actionMessage;\n      }, (newValue:lobby.controllers.IActionMessage, oldValue:lobby.controllers.IActionMessage) => {\n        if (oldValue.isError === null && newValue.isError !== null) {\n          if (newValue.isError) { // Error\n            element.find('div:first').addClass('message-panel-error');\n          } else if (!newValue.isError) {\n            element.find('div:last').addClass('message-panel-success');\n          }\n          this.$timeout(function () {\n            $scope.lobby.actionMessage.isError = null;\n          }, 5000)\n        }\n      })\n    }\n\n    public static factory():ng.IDirectiveFactory {\n      var directive = ($timeout) => new ActionMessageDisplay($timeout);\n      directive.$inject = ['$timeout'];\n      return directive;\n    }\n  }\n\n  interface IRoomValidation extends ng.INgModelController {\n    $validators : ICustomValidator;\n  }\n\n  interface ICustomValidator extends ng.IModelValidators {\n    room(modelValue:string, viewValue:string) : boolean;\n  }\n}\n\nangular\n  .module('lobby')\n  .directive(lobby.directives.StopEvent.DirectoryName, lobby.directives.StopEvent.factory())\n  .directive(lobby.directives.RoomValidator.DirectoryName, lobby.directives.RoomValidator.factory())\n  .directive(lobby.directives.ActionMessageDisplay.DirectoryName, lobby.directives.ActionMessageDisplay.factory());\n\n\n\n","/// <reference path='../_lobby.ts'/>\r\n\r\nmodule lobby.controllers {\r\n  'use strict';\r\n\r\n  class LobbyCtrl implements ILobbyScope {\r\n\r\n    private lobbyInterval : ng.IIntervalService\r\n    public lobbyData : Array<lobby.interfaces.IRoomRessource> = [];\r\n    public gameCreation:boolean = true;\r\n    public gameEditing:boolean = true;\r\n    public currentItem: any = new lobby.interfaces.Room(null);\r\n    public displayUser:User.Services.IUser;\r\n    public actionMessage:IActionMessage = new ActionMessage(null, null);\r\n\r\n    // Sorting the lobby list\r\n    public orderBy : string = \"roomId\";\r\n    public isDesc : boolean = false;\r\n\r\n    // $inject annotation.\r\n    // It provides $injector with information about dependencies to be injected into constructor\r\n    // it is better to have it close to the constructor, because the parameters must match in count and type.\r\n    // See http://docs.angularjs.org/guide/di\r\n    public static $inject = [\r\n      '$scope',\r\n      '$log',\r\n      '$window',\r\n      '$rootScope',\r\n      'lobbyStorage',\r\n      'UserService',\r\n      '$interval'\r\n    ];\r\n\r\n    // dependencies are injected via AngularJS $injector\r\n    constructor(private $scope, private $log:ng.ILogService, private $window : ng.IWindowService, private $rootScope:ng.IScope,\r\n                private lobbyStorage, private userService:User.Services.IUserService, private $interval) {\r\n      var self = this;\r\n      this.displayUser = userService.getCurrentUser();\r\n      this.getRooms(this)();\r\n      this.lobbyInterval = $interval(this.getRooms(this), 3000);\r\n\r\n\r\n      // Set up the tooltip plugin\r\n      var htmlBody : any = $(\"body\");\r\n      $(document).ready(function() {\r\n        htmlBody.tooltip({ selector: '[data-toggle=tooltip]' });\r\n      });\r\n\r\n      $scope.$on('$destroy', () => {\r\n        self.stopInterval(self)();\r\n      });\r\n    }\r\n\r\n    // Helper functions\r\n\r\n    public toggleNewGame():void {\r\n      this.gameEditing = true;\r\n      this.gameCreation = this.gameCreation === false ? true : false;\r\n    }\r\n\r\n    public toggleEditingGame():void {\r\n      this.gameCreation = true;\r\n      this.gameEditing = this.gameEditing === false ? true : false;\r\n    }\r\n\r\n    public editRoom(room:lobby.interfaces.IRoomRessource):void {\r\n      this.currentItem.name = room.name;\r\n      this.currentItem.roomId = room.roomId;\r\n      this.toggleEditingGame();\r\n    }\r\n\r\n    public joinRoom(room:lobby.interfaces.IRoomRessource) {\r\n      room.isJoin = true;\r\n      this.updateRoom(room);\r\n    }\r\n\r\n    private getPositionOfElement(array:Array<any>, element, value) {\r\n      var pos:number = -1;\r\n      for (var i = 0, len = array.length; i < len; i++) {\r\n        if (array[i][element] == value) pos = i;\r\n      }\r\n      return pos;\r\n    }\r\n\r\n    private getHighestValue<T>(array:Array<any>, element:string, seed:T):T {\r\n      var value:T = seed;\r\n      for (var i = 0, len = array.length; i < len; i++) {\r\n        if (array[i][element] > value) {\r\n          value = array[i][element];\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n\r\n    public reorderList(orderBy : string){\r\n      // Double clicking the arrow => swap from ASC to DESC\r\n      if(this.orderBy === orderBy){\r\n        this.isDesc = this.isDesc ? false : true;\r\n      } else { // order by a new column => swap back to ASC\r\n        this.orderBy = orderBy;\r\n        this.isDesc = false;\r\n      }\r\n    }\r\n\r\n    private stopInterval(self) {\r\n      return function () {\r\n        if (angular.isDefined(self.lobbyInterval)) {\r\n          self.$interval.cancel(self.lobbyInterval);\r\n          self.lobbyInterval = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // CRUD Operations with $resources\r\n\r\n    // CREATE\r\n    public createRoom(room:lobby.interfaces.IRoomRessource):void {\r\n      var self = this;\r\n      var nextRoomId = this.getHighestValue<number>(this.lobbyData, \"roomId\", -1) + 1;\r\n      var roomRes = this.lobbyStorage.LobbyRoom();\r\n      roomRes.get({id: nextRoomId}, (newRoom:lobby.interfaces.IRoomRessource) => {\r\n        newRoom.name = room.name;\r\n        newRoom.$save(function (room) { // success callback\r\n          self.lobbyData.push(room);\r\n          self.actionMessage = new lobby.controllers.ActionMessageSuccess({\r\n            isError: false,\r\n            data: \"The room has been created!\"\r\n          })\r\n        }, (err) => { // error callback\r\n          self.actionMessage = new lobby.controllers.ActionMessageError({\r\n            isError: true,\r\n            status: err.status,\r\n            statusText: err.statusText,\r\n            data: err.data\r\n          });\r\n        });\r\n      });\r\n\r\n      this.toggleNewGame();\r\n    }\r\n\r\n    // DELETE\r\n    public deleteRoom(room:lobby.interfaces.IRoomRessource):void {\r\n      var self = this;\r\n      var pos = this.getPositionOfElement(self.lobbyData, \"roomId\", room.roomId);\r\n      var roomRes = this.lobbyStorage.LobbyRoom();\r\n      roomRes.get({id: room.roomId}, (room:lobby.interfaces.IRoomRessource) => {\r\n        room.isDelete = true;\r\n        room.$save(function (room) { // success callback\r\n          self.lobbyData.splice(pos, 1);\r\n          self.actionMessage = new lobby.controllers.ActionMessageSuccess({\r\n            isError: false,\r\n            data: \"The room has been deleted!\"\r\n          })\r\n        }, (err) => { // error callback\r\n          self.actionMessage = new lobby.controllers.ActionMessageError({\r\n            isError: true,\r\n            status: err.status,\r\n            statusText: err.statusText,\r\n            data: err.data\r\n          });\r\n        });\r\n      });\r\n    }\r\n\r\n    // GET\r\n    private getRooms(self) {\r\n      return function() {\r\n        var res = self.lobbyStorage.LobbyRoom().query(function () { // success callback\r\n          self.lobbyData = res;\r\n        }, function (err) { // error callback\r\n          //   self.actionMessage = new lobby.controllers.ActionMessageError({\r\n          //  isError: true,\r\n          //  status: err.status,\r\n          //  statusText: err.statusText,\r\n          //  data: err.data\r\n          //});\r\n        });\r\n      }\r\n    }\r\n\r\n    // UPDATE\r\n    public updateRoom(newRoom:lobby.interfaces.IRoomRessource):void {\r\n      var self = this;\r\n      var pos = this.getPositionOfElement(self.lobbyData, \"roomId\", newRoom.roomId);\r\n      var roomRes = this.lobbyStorage.LobbyRoom();\r\n      roomRes.get({id: newRoom.roomId}, (room:lobby.interfaces.IRoomRessource) => {\r\n        room.name = newRoom.name; // Update the name of the room\r\n        room.isJoin = newRoom.isJoin || null;\r\n        room.$save(function (room) { // success callback\r\n          self.lobbyData[pos] = room;\r\n          self.actionMessage = new lobby.controllers.ActionMessageSuccess({\r\n            isError: false,\r\n            data: \"Your room has been updated!\"\r\n          })\r\n        }, (err) => { // error callback\r\n          self.actionMessage = new lobby.controllers.ActionMessageError({\r\n            isError: true,\r\n            status: err.status,\r\n            statusText: err.statusText,\r\n            data: err.data\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  // Action Message Interfaces\r\n  export interface IActionMessage {\r\n    isError : boolean;\r\n    data : string // Contains the server side generated error message which gets displayed to the user\r\n  }\r\n\r\n  export interface IActionMessageError extends IActionMessage {\r\n    statusText? : string;\r\n    status? : string;\r\n  }\r\n\r\n  export interface IActionMessageSuccess extends IActionMessage {\r\n  }\r\n\r\n  // Action Message Classes (share the common data property which is either the error or a normal message towards the user)\r\n  export class ActionMessage implements IActionMessage {\r\n    public isError : boolean;\r\n    public data:string;\r\n\r\n    constructor(data:string, isError : boolean) {\r\n      this.data = data;\r\n      this.isError = isError;\r\n    }\r\n  }\r\n\r\n  export class ActionMessageError extends ActionMessage implements IActionMessageError {\r\n    public status:string;\r\n    public statusText:string;\r\n\r\n    constructor(messageObj:IActionMessageError) {\r\n      this.status = messageObj.status;\r\n      this.statusText = messageObj.statusText;\r\n      super(messageObj.data, messageObj.isError);\r\n    }\r\n  }\r\n\r\n  export class ActionMessageSuccess extends ActionMessage implements IActionMessageSuccess {\r\n    constructor(messageObj:IActionMessageSuccess) {\r\n      super(messageObj.data, messageObj.isError);\r\n    }\r\n  }\r\n\r\n  export interface ILobby extends ng.IScope {\r\n    lobby: ILobbyScope;\r\n  }\r\n\r\n  export interface ILobbyScope {\r\n      gameCreation: boolean;\r\n      gameEditing: boolean;\r\n      currentItem: lobby.interfaces.IRoomRessource;\r\n      displayUser: User.Services.IUser;\r\n      actionMessage: IActionMessage;\r\n  }\r\n\r\n  // Websocket Message classes & interfaces\r\n\r\n  // Receive the start signal from the server\r\n  export interface IMessage {\r\n\r\n    /**\r\n     * Type of the message.\r\n     */\r\n      type: string;\r\n\r\n    /**\r\n     * Further granularity for a given \"type\"\r\n     */\r\n    id? : string;\r\n\r\n    /**\r\n     * The message content.\r\n     */\r\n    data: any;\r\n  }\r\n\r\n  export class ClientMessage<T> implements IMessage {\r\n\r\n    type:string;\r\n    id:string;\r\n    data:T;\r\n\r\n    constructor(type:string, data:T, id?:string) {\r\n      this.type = type;\r\n      this.data = data;\r\n      this.id = id;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * @ngdoc object\r\n   * @name lobby.controller:LobbyCtrl\r\n   *\r\n   * @description\r\n   *\r\n   */\r\n  angular\r\n    .module('lobby')\r\n    .controller('LobbyCtrl', LobbyCtrl);\r\n}\r\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule home {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('home')\r\n    .config(config)\r\n\r\n  function config($routeProvider: ng.route.IRouteProvider) {\r\n    $routeProvider\r\n      .when('/home', {\r\n        templateUrl: 'home/views/home.tpl.html',\r\n        controller: 'HomeCtrl',\r\n        controllerAs: 'home'\r\n      });\r\n  }\r\n}\r\n","///<reference path='../../typings/tsd.d.ts' />\nmodule game {\n  'use strict';\n\n  angular\n    .module('game')\n    .config(config)\n\n  function config($routeProvider: ng.route.IRouteProvider) {\n    $routeProvider\n      .when('/game', {\n        templateUrl: 'game/views/game.tpl.html',\n        controller: 'GameCtrl',\n        controllerAs: 'game',\n        resolve: {\n          newGame: ['GameService', 'SessionService', function (gameService: Game.Services.IGameService, sessionService: Session.Services.ISessionService) {\n            return sessionService.loadCurrentSession().then(result => {\n              return gameService.newGame()\n            });\n          }]\n        }\n      })\n      .when('/game/:gameId', {\n        templateUrl: 'game/views/game.tpl.html',\n        controller: 'GameCtrl',\n        controllerAs: 'game',\n        resolve: {\n          loadGame: ['GameService', '$route', function (gameService: Game.Services.IGameService, $route) {\n            return gameService.loadGame($route.current.params.gameId);\n          }]\n        }\n      });\n  }\n}\n","///<reference path='../../typings/tsd.d.ts' />\r\nmodule chat {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('chat')\r\n  //  .config(config)\r\n  //\r\n  //function config($routeProvider: ng.route.IRouteProvider) {\r\n  //  $routeProvider\r\n  //    .when('/chat', {\r\n  //      templateUrl: 'chat/views/chat.tpl.html',\r\n  //      controller: 'ChatCtrl',\r\n  //      controllerAs: 'chat',\r\n  //      resolve: {\r\n  //        'LoadUserData': ['UserService', function (userService: User.Services.IUserService) {\r\n  //          return userService.loadUserData();\r\n  //        }]\r\n  //      }\r\n  //    });\r\n  //}\r\n}\r\n\r\n\r\n","///<reference path='../typings/tsd.d.ts' />\nmodule vierGewinnt6 {\n  'use strict';\n\n  /* @ngdoc object\n   * @name vierGewinnt6\n   * @description\n   *\n   */\n  angular\n    .module('vierGewinnt6', [\n      'ngRoute',\n      'ngResource',\n      'mgcrea.ngStrap',\n      'home',\n      'game',\n      'lobby',\n      'user',\n      'session',\n      'common',\n      'chat'\n    ])\n    .constant('appConfig', {\n      baseUrlPattern: 'http://{host}:2999',\n      baseWsUrlPattern: 'ws://{host}:2999'\n    });\n\n  export interface IAppConfig {\n    baseUrlPattern: string;\n    baseWsUrlPattern: string;\n  }\n}\n","///<reference path='../typings/tsd.d.ts' />\nmodule vierGewinnt6 {\n  'use strict';\n\n  angular\n    .module('vierGewinnt6')\n    .config(config)\n    .run(init);\n\n  function config($routeProvider: ng.route.IRouteProvider, $httpProvider: ng.IHttpProvider) {\n    $routeProvider.otherwise({\n      redirectTo: '/home'\n    });\n\n    $httpProvider.defaults.withCredentials = true;\n  }\n\n  /**\n   * Resolve load current session for each route and catch route change errors globally\n   * @param $route\n   * @param $rootScope\n   * @param $location\n   * @param LoggerService\n   */\n  function init($route: ng.route.IRouteService, $rootScope: ng.IScope, $location: ng.ILocationService, LoggerService: Common.Services.ILoggerService) {\n    for (var r in $route.routes) {\n      var route = $route.routes[r];\n      route.resolve = route.resolve ? route.resolve : {};\n      route.resolve['LoadCurrentSession'] = ['SessionService', function (sessionService:Session.Services.ISessionService) {\n        return sessionService.loadCurrentSession();\n      }];\n    };\n\n    $rootScope.$on(\"$routeChangeError\", function(evt, current, previous, rejection) {\n      if (rejection && rejection.status && rejection.status === 401) {\n        $location.path(\"/session\"); // redirect to login screen on unauthorized error\n      } else {\n        LoggerService.warn('route change error', rejection);\n      }\n    });\n  }\n}\n","<div class=\"container-fluid\">\r\n\r\n  <div class=\"row\">\r\n    <header class=\"col-xs-12 col-sm-12\">\r\n      <h2>Einstellungen</h2>\r\n      <p>Benutzername und Passwort ändern</p>\r\n    </header>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <section class=\"col-xs-6 col-sm-6\">\r\n      <form name=\"userForm\" ng-submit=\"user.saveUser()\">\r\n        <div class=\"form-group has-feedback\" ng-class=\"{'has-success': userForm.name.$valid, 'has-error': userForm.name.$invalid }\">\r\n          <label for=\"name\">Name</label>\r\n          <input ng-model=\"user.displayUser.name\" type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Name\" required ng-pattern=\"/^[a-zA-Z0-9]{3,15}$/\">\r\n          <span class=\"glyphicon form-control-feedback\" ng-class=\"{'glyphicon-ok': userForm.name.$valid, 'glyphicon-remove': userForm.name.$invalid}\" aria-hidden=\"true\"></span>\r\n          <span class=\"help-block\">Drei bis 15 alphanumerische Zeichen erforderlich.</span>\r\n        </div>\r\n        <div class=\"form-group has-feedback\" ng-class=\"{'has-success': userForm.password.$valid, 'has-error': userForm.password.$invalid }\">\r\n          <label for=\"password\">Passwort</label>\r\n          <input ng-model=\"user.password\" type=\"password\" class=\"form-control has-error\" name=\"password\" id=\"password\" placeholder=\"Password\" required ng-minlength=\"3\">\r\n          <span class=\"glyphicon form-control-feedback\" ng-class=\"{'glyphicon-ok': userForm.password.$valid, 'glyphicon-remove': userForm.password.$invalid}\" aria-hidden=\"true\"></span>\r\n          <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\r\n        </div>\r\n        <div class=\"form-group has-feedback\" ng-class=\"{'has-success': userForm.passwordCheck.$valid, 'has-error': userForm.passwordCheck.$invalid }\">\r\n          <label for=\"passwordCheck\">Passwort wiederholen</label>\r\n          <input ng-model=\"user.passwordCheck\" type=\"password\" class=\"form-control\" name=\"passwordCheck\" id=\"passwordCheck\" placeholder=\"Password\" required ng-minlength=\"3\">\r\n          <span class=\"glyphicon form-control-feedback\" ng-class=\"{'glyphicon-ok': userForm.passwordCheck.$valid, 'glyphicon-remove': userForm.passwordCheck.$invalid}\" aria-hidden=\"true\"></span>\r\n          <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-default\" ng-disabled=\"userForm.$invalid\">Speichern</button>\r\n      </form>\r\n    </section>\r\n  </div>\r\n</div>\r\n","<div class=\"container-fluid\">\n\n  <div class=\"row\">\n    <header class=\"col-xs-12 col-sm-12\">\n      <h2>Login</h2>\n    </header>\n  </div>\n\n  <div class=\"row\">\n    <section class=\"col-xs-6 col-sm-6\">\n\n      <!-- user is currently logged out -->\n      <div ng-hide=\"session.userLoggedIn\">\n        <p>Bitte melde dich an.</p>\n        <form name=\"sessionForm\" ng-submit=\"session.login()\">\n          <div class=\"form-group has-feedback\" ng-class=\"{'has-success': sessionForm.name.$valid, 'has-error': sessionForm.name.$invalid }\">\n            <label for=\"name\">Name</label>\n            <input ng-model=\"session.username\" type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" placeholder=\"Name\" required ng-pattern=\"/^[a-zA-Z0-9]{3,15}$/\">\n            <span class=\"glyphicon form-control-feedback\" ng-class=\"{'glyphicon-ok': sessionForm.name.$valid, 'glyphicon-remove': sessionForm.name.$invalid}\" aria-hidden=\"true\"></span>\n            <span class=\"help-block\">Drei bis 15 alphanumerische Zeichen erforderlich.</span>\n          </div>\n          <div class=\"form-group has-feedback\" ng-class=\"{'has-success': sessionForm.password.$valid, 'has-error': sessionForm.password.$invalid }\">\n            <label for=\"password\">Passwort</label>\n            <input ng-model=\"session.password\" type=\"password\" class=\"form-control has-error\" name=\"password\" id=\"password\" placeholder=\"Password\" required ng-minlength=\"3\">\n            <span class=\"glyphicon form-control-feedback\" ng-class=\"{'glyphicon-ok': sessionForm.password.$valid, 'glyphicon-remove': sessionForm.password.$invalid}\" aria-hidden=\"true\"></span>\n            <span class=\"help-block\">Mindestens drei Zeichen erforderlich.</span>\n          </div>\n          <button type=\"submit\" class=\"btn btn-default\" ng-disabled=\"sessionForm.$invalid\">Login</button>\n        </form>\n      </div>\n\n      <!-- user is currently logged in -->\n      <div ng-show=\"session.userLoggedIn\">\n        <p>Hallo {{session.currentSession.username}}!</p>\n        <button ng-click=\"session.logout()\" class=\"btn btn-default\">Logout</button>\n      </div>\n    </section>\n  </div>\n</div>\n","<div class=\"container-fluid\">\r\n\r\n  <div class=\"row\">\r\n    <header class=\"col-xs-12 col-md-12\">\r\n      <h2>Lobby</h2>\r\n      <p>Chatte und starte ein Spiel</p>\r\n    </header>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <section class=\"col-xs-12 col-md-12\">\r\n\r\n      <!-- Static navbar -->\r\n      <nav class=\"navbar navbar-default\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"navbar-header\">\r\n            <a id=\"createGame\" class=\"navbar-brand\" href=\"#\" ng-click=\"lobby.toggleNewGame()\" stop-event><span\r\n              class=\"glyphicon glyphicon-plus\"></span></a>\r\n          </div>\r\n          <div id=\"navbar\" class=\"navbar-collapse collapse\">\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n    </section>\r\n  </div>\r\n\r\n  <div class=\"row\">\r\n    <section class=\"col-xs-12 col-md-8\">\r\n\r\n      <!--Panel Heading - Create New Game -->\r\n      <div class=\"panel panel-default\" ng-hide=\"lobby.gameCreation\">\r\n        <div class=\"panel-heading\">\r\n          <span class=\"glyphicon glyphicon-file icon\"></span>\r\n          Create New Game\r\n        </div>\r\n        <div class=\"panel-body\">\r\n          <div class=\"form-group has-feedback\">\r\n            <form name=\"createRoomForm\" novalidate> <!-- deactivate HTML5 validation-->\r\n              <label for=\"creation-name\">Name:</label>\r\n              <input type=\"text\" name=\"name\" class=\"form-control\" id=\"creation-name\" ng-minlength=\"3\"\r\n                     ng-model=\"lobby.currentItem.name\" room>\r\n\r\n              <div class=\"validation-wrapper\">\r\n                <div ng-show=\"createRoomForm.name.$error.minlength\" class=\"validation-errors\">The minimum length of the\r\n                  number has to be at least 3 character long!\r\n                </div>\r\n                <div ng-show=\"createRoomForm.name.$error.room \" class=\"validation-errors\">Only alphanumeric characters\r\n                  are accepted as input!\r\n                </div>\r\n                <span ng-hide=\"createRoomForm.name.$error.room || createRoomForm.name.$error.minlength\"\r\n                      class=\"glyphicon glyphicon-ok form-control-feedback\" aria-hidden=\"true\"></span>\r\n                <span ng-show=\"createRoomForm.name.$error.room || createRoomForm.name.$error.minlength\"\r\n                      class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-default\"\r\n                  ng-click=\"createRoomForm.$valid && lobby.createRoom({name : lobby.currentItem.name})\">Create\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!--Panel Heading - Edit Existing Game -->\r\n      <div class=\"panel panel-default\" ng-hide=\"lobby.gameEditing\">\r\n        <div class=\"panel-heading\">\r\n          <span class=\"glyphicon glyphicon-file icon\"></span>\r\n          Edit Existing Game\r\n        </div>\r\n        <div class=\"panel-body\">\r\n          <div class=\"form-group has-feedback\">\r\n            <form name=\"editRoomForm\" novalidate> <!-- deactivate HTML5 validation-->\r\n              <label for=\"editing-title\">Name:</label>\r\n              <input type=\"text\" name=\"name\" class=\"form-control\" id=\"editing-title\" ng-minlength=\"3\"\r\n                     ng-model=\"lobby.currentItem.name\" room>\r\n              <input type=\"hidden\" name=\"roomId\" class=\"form-control\" ng-model=\"lobby.currentItem.roomId\">\r\n\r\n              <div class=\"validation-wrapper\">\r\n                <div ng-show=\"editRoomForm.name.$error.minlength\" class=\"validation-errors\">The minimum length of the\r\n                  number has to be at least 3 character long!\r\n                </div>\r\n                <div ng-show=\"editRoomForm.name.$error.room \" class=\"validation-errors\">Only alphanumeric characters are\r\n                  accepted as input!\r\n                </div>\r\n                <span ng-hide=\"editRoomForm.name.$error.room || editRoomForm.name.$error.minlength\"\r\n                      class=\"glyphicon glyphicon-ok form-control-feedback\" aria-hidden=\"true\"></span>\r\n                <span ng-show=\"editRoomForm.name.$error.room || editRoomForm.name.$error.minlength\"\r\n                      class=\"glyphicon glyphicon-remove form-control-feedback\" aria-hidden=\"true\"></span>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-default\"\r\n                  ng-click=\"editRoomForm.$valid && lobby.updateRoom({roomId : lobby.currentItem.roomId, name : lobby.currentItem.name})\">\r\n            Edit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Show messages regarding actions to the user -->\r\n      <action-message-display></action-message-display>\r\n\r\n      <!-- Display Games -->\r\n      <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n          <span class=\"glyphicon glyphicon-list-alt icon\"></span>\r\n          Games\r\n        </div>\r\n        <div class=\"panel-body\">\r\n          <table class=\"table note-table\">\r\n            <thead class=\"game-table-header\">\r\n            <tr>\r\n              <th>\r\n                RoomId\r\n                <a href=\"#\" ng-click=\"lobby.reorderList('roomId')\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n              <th>\r\n                Name\r\n                <a href=\"#\" ng-click=\"lobby.reorderList('name')\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n              <th>\r\n                Status\r\n                <a href=\"#\" ng-click=\"lobby.reorderList('status')\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n              <th>\r\n                Players\r\n                <a href=\"#\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n              <th>\r\n                Creation\r\n                <a href=\"#\" ng-click=\"lobby.reorderList('creationTime')\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n              <th>\r\n                Actions\r\n                <a href=\"#\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n                </a>\r\n              </th>\r\n            </tr>\r\n            </thead>\r\n            <tbody class=\"note-table-body\">\r\n            <tr class=\"noteTableRow\" ng-repeat=\"item in lobby.lobbyData | orderBy: lobby.orderBy : lobby.isDesc\">\r\n              <td>{{item.roomId}}</td>\r\n              <td>{{item.name}}</td>\r\n              <td>{{item.status}}</td>\r\n              <td>\r\n                <span ng-repeat=\"player in item.players\">\r\n                  {{player.userName}}\r\n                </span>\r\n              </td>\r\n              <td>{{item.creationTime}}</td>\r\n              <td>\r\n                <a href=\"#\" class=\"icon\" ng-click=\"lobby.joinRoom(item)\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Join an existing game\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-plus\"></span>\r\n                </a>\r\n                <a href=\"#\" class=\"icon\" ng-click=\"lobby.editRoom(item)\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Edit your created room\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-pencil\"></span>\r\n                </a>\r\n                <a href=\"#\" class=\"icon\" ng-click=\"lobby.deleteRoom(item)\" data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete your created room\" stop-event>\r\n                  <span class=\"glyphicon glyphicon-trash\"></span>\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n    </section>\r\n    <aside class=\"col-xs-12 col-md-4\">\r\n\r\n      <!-- Import the chat controller -->\r\n      <div ng-controller=\"ChatCtrl\">\r\n        <chat-window chat-model=\"chatModel\" chat-section='lobby'></chat-window>\r\n      </div>\r\n\r\n     </aside>\r\n   </div>\r\n</div>\r\n\r\n\r\n\r\n","<!-- Error -->\n<div class=\"panel panel-default action-message\" ng-hide=\"lobby.actionMessage.isError === null || lobby.actionMessage.isError === false\">\n    <span class=\"action-message-text \">\n      {{lobby.actionMessage.data}}\n      <!--{{lobby.actionMessage.status}}\n      {{lobby.actionMessage.statusText}}-->\n    </span>\n</div>\n\n<!-- Success -->\n<div class=\"panel panel-default action-message\" ng-hide=\"lobby.actionMessage.isError === null || lobby.actionMessage.isError === true\">\n  <span class=\"action-message-text\">\n    {{lobby.actionMessage.data}}\n  </span>\n</div>\n\n","<div class=\"container-fluid\">\n\n  <header>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-12\">\n        <h2>Willkommen beim Vier Gewinnt der Gruppe 6</h2>\n      </div>\n    </div>\n  </header>\n\n  <section>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-12\">\n        <h3>Spiel starten</h3>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-10\">\n        Klicke auf <a href=\"#/game\">Spiel</a>, um ein lokales Spiel zu zweit vor einem Bildschirm zu starten.\n      </div>\n      <div class=\"col-xs-12 col-sm-2\">\n        <a class=\"btn btn-default btn-block\" href=\"#/game\" role=\"button\">Spiel</a>\n      </div>\n    </div>\n  </section>\n\n  <section>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-12\">\n        <h3>Spielpartner finden</h3>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-10\">\n        Klicke auf <a href=\"#/lobby\">Lobby</a>, um einen Spielpartner für ein Netzwerkspiel zu finden.\n      </div>\n      <div class=\"col-xs-12 col-sm-2\">\n        <a class=\"btn btn-default btn-block\" href=\"#/lobby\" role=\"button\">Lobby</a>\n      </div>\n    </div>\n  </section>\n\n  <section>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-12\">\n        <h3>Spielkonto nutzen</h3>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-xs-12 col-sm-10\">\n        Klicke auf <a href=\"#/session\">Login</a>, um dich an einem bereits bestehenden Spielkonto anzumelden oder um ein Spielkonto zu erstellen.<br>\n        Klicke auf <a href=\"#/user\">Einstellungen</a>, um deine Angaben im Spielkonto anzuzeigen oder zu ändern.\n      </div>\n      <div class=\"col-xs-12 col-sm-2\">\n        <a class=\"btn btn-default btn-block\" href=\"#/session\" role=\"button\">Login</a>\n      </div>\n    </div>\n  </section>\n\n</div>\n","<div class=\"container-fluid\">\n\n  <div class=\"row\">\n    <header class=\"col-xs-12 col-sm-12\">\n      <h2>Spiel</h2>\n      <p>Auf Spalte klicken um Stein zu legen</p>\n    </header>\n  </div>\n\n  <div class=\"row\">\n    <section class=\"col-xs-12 col-sm-6\">\n      <game-move></game-move>\n    </section>\n  </div>\n\n  <div class=\"row\">\n\n    <section class=\"col-xs-12 col-sm-6\">\n\n      <div class=\"game-container\" ng-click=\"game.doMove($event)\" ng-mouseover=\"game.mouseOver($event)\">\n          <div class=\"game-row\" ng-repeat=\"gameFieldRow in game.getCurrentGame().cells track by $index\">\n            <game-field ng-repeat=\"gameField in gameFieldRow track by $index\"></game-field>\n          </div>\n      </div>\n\n      <div class=\"btn-group btn-group-justified game-control\" role=\"group\" aria-label=\"...\">\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"game.restartGame()\">\n            <span class=\"glyphicon glyphicon-repeat\" aria-hidden=\"true\"></span> Neues Spiel\n          </button>\n        </div>\n        <div class=\"btn-group\" role=\"group\">\n          <button type=\"button\" class=\"btn btn-default\" ng-click=\"game.breakGame()\">\n            <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span> Spiel beenden\n          </button>\n        </div>\n      </div>\n    </section>\n\n    <aside class=\"col-xs-12 col-sm-6\">\n      <!-- Chat Module -->\n      <div ng-controller=\"ChatCtrl\">\n        <chat-window chat-model=\"chatModel\" chat-section='game' id=\"(game.getCurrentGame())._id\"></chat-window>\n      </div>\n    </aside>\n\n  </div>\n\n</div>\n","<div class=\"game-move\">\n\n  <div class=\"move-play\" ng-click=\"game.doMove($event)\" ng-mouseover=\"game.mouseOver($event)\" tabindex=\"0\" ng-keydown=\"game.keyDown($event)\" >\n    <div class=\"game-row\">\n      <game-field ng-repeat=\"gameField in game.getMoveFields() track by $index\"></game-field>\n    </div>\n  </div>\n\n  <div class=\"move-info\" ng-class=\"game.getGameState().state\">\n    <div class=\"message-cell\">\n      <span class=\"message-text\">{{game.getGameState().message}}</span>\n    </div>\n  </div>\n\n</div>\n","<div class=\"game-box\">\r\n  <div class=\"game-field\" ng-class=\"{'red':gameField==1, 'yellow':gameField==2}\" data-x=\"{{$index}}\" data-y=\"{{$parent.$index}}\"></div>\r\n</div>\r\n","<nav class='navbar navbar-inverse' role='navigation' data-bs-navbar data-bs-collapse data-start-collapsed='true'>\n  <div class='container'>\n\n    <div class='navbar-header'>\n      <button class='navbar-toggle collapsed' type='button' data-bs-collapse-toggle>\n        <span class='sr-only'>Toggle Navigation</span>\n        <span class='icon-bar'></span>\n        <span class='icon-bar'></span>\n        <span class='icon-bar'></span>\n      </button>\n      <a class='navbar-brand' href='#/'>VierGewinnt6</a>\n    </div>\n\n    <div class='navbar-collapse collapse' data-bs-collapse-target>\n      <ul class='nav navbar-nav'>\n        <li data-match-route='/home'>\n          <a href='#/home'>Home</a>\n        </li>\n        <li data-match-route='/lobby'>\n          <a href='#/lobby'>Lobby</a>\n        </li>\n        <li data-match-route='/game'>\n          <a href='#/game'>Spiel</a>\n        </li>\n        <li data-match-route='/user' ng-show='mainMenu.isUserLoggedIn()'>\n          <a href='#/user'>Einstellungen</a>\n        </li>\n        <li data-match-route='/session'>\n          <a href='#/session'>\n            <span ng-hide='mainMenu.isUserLoggedIn()'>Login</span>\n            <span ng-show='mainMenu.isUserLoggedIn()'>Logout</span>\n          </a>\n        </li>\n      </ul>\n\n      <ul class=\"nav navbar-nav navbar-right\">\n        <p class=\"navbar-text\">{{mainMenu.getCurrentUsername()}}</p>\n      </ul>\n    </div>\n\n  </div>\n</nav>\n","","<!-- Chat window-->\r\n<div class=\"panel panel-default\">\r\n  <div class=\"panel-heading\">\r\n    <span class=\"glyphicon glyphicon-list-alt icon\"></span>\r\n    Chat\r\n  </div>\r\n\r\n  <div class=\"panel-body\">\r\n    <label>Nachrichten</label>\r\n    <div class=\"chat-output\">\r\n      <div id=\"chatHistoryPlaceholder\">\r\n        <i>Es sind momentan keine Nachrichten vorhanden!</i>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <div class=\"form-group has-feedback\">\r\n      <form action=\"\">\r\n        <label>Neue Nachrichten</label>\r\n        <input id=\"msgInput\" ng-keypress=\"inputBoxKeypress($event)\" autocomplete=\"off\" ng-model=\"currentMessage.message\" class=\"form-control\"/>\r\n      </form>\r\n    </div>\r\n    <button ng-click=\"sendMessage(currentMessage)\" type='button' stop-event class=\"btn btn-default\">Senden</button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"/source/"}